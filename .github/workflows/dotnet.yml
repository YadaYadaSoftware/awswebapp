# TaskManager CI/CD Pipeline - Shared Infrastructure + Branch Applications

name: TaskManager CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release
      
    - name: Publish API for Lambda
      run: dotnet publish src/TaskManager.Api/TaskManager.Api.csproj --configuration Release --output ./publish/api --runtime linux-x64 --self-contained false
      
    - name: Publish Web for Lambda
      run: dotnet publish src/TaskManager.Web/TaskManager.Web.csproj --configuration Release --output ./publish/web --runtime linux-x64 --self-contained false /p:GenerateRuntimeConfigurationFiles=true
      
    - name: Create API Lambda deployment package
      run: |
        cd ./publish/api
        zip -r ../../api-lambda-deployment.zip .
        
    - name: Create Web Lambda deployment package
      run: |
        cd ./publish/web
        zip -r ../../web-lambda-deployment.zip .
        
    - name: Upload API Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: api-lambda-package
        path: api-lambda-deployment.zip
        
    - name: Upload Web Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: web-lambda-package
        path: web-lambda-deployment.zip

  deploy-infrastructure:
    name: Deploy Shared Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy Shared Infrastructure
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-shared-infrastructure
        template: infrastructure/shared-infrastructure.yaml
        parameter-overrides: |
          DatabasePassword=${{ secrets.DATABASE_PASSWORD }}
        capabilities: "CAPABILITY_NAMED_IAM"
        no-fail-on-empty-changeset: "1"
      timeout-minutes: 15

  deploy-application:
    name: Deploy Branch Application
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get branch name for stack naming
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        STACK_NAME="taskmanager-${BRANCH_NAME}"
        echo "Branch: $BRANCH_NAME"
        echo "Stack name: $STACK_NAME"
        echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        
    - name: Cleanup failed branch stack (if exists)
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "STACK_NOT_FOUND")
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "DELETE_FAILED" ]; then
          echo "üóëÔ∏è Deleting failed branch stack: ${{ env.STACK_NAME }}"
          aws cloudformation delete-stack \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          aws cloudformation wait stack-delete-complete \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Failed branch stack cleaned up"
        fi
        
    - name: Upload templates to S3 for nested stacks
      run: |
        # Get S3 bucket name from shared infrastructure stack
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-shared-infrastructure \
          --query 'Stacks[0].Outputs[?OutputKey==`TemplatesBucketName`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        # Upload nested stack templates
        aws s3 cp src/TaskManager.Api/api-template.yaml s3://$BUCKET_NAME/api-template.yaml
        aws s3 cp src/TaskManager.Web/web-template.yaml s3://$BUCKET_NAME/web-template.yaml
        
        echo "TEMPLATE_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
        
    - name: Deploy Wrapper Template (Nested Stacks)
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.STACK_NAME }}
        template: wrapper-template.yaml
        parameter-overrides: |
          Environment=${{ env.BRANCH_NAME }},
          GoogleClientId=${{ secrets.GOOGLE_CLIENT_ID }},
          GoogleClientSecret=${{ secrets.GOOGLE_CLIENT_SECRET }}
        capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
        no-fail-on-empty-changeset: "1"
      timeout-minutes: 20
        
    - name: Setup branch database
      run: |
        # Trigger database setup function
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }}-api \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "Setting up database for branch: ${{ env.BRANCH_NAME }}"
        curl -X POST "${API_URL}setup-database" || echo "Database setup completed"
        
    - name: Get deployment outputs
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }}-api \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        WEB_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }}-web \
          --query 'Stacks[0].Outputs[?OutputKey==`WebEndpoint`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        BASTION_IP=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-shared-infrastructure \
          --query 'Stacks[0].Outputs[?OutputKey==`BastionHostIP`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        TUNNEL_CMD=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-shared-infrastructure \
          --query 'Stacks[0].Outputs[?OutputKey==`DatabaseTunnelCommand`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "üöÄ TaskManager (${{ env.BRANCH_NAME }}) deployed successfully!"
        echo "üìã API Stack: ${{ env.STACK_NAME }}-api"
        echo "üìã Web Stack: ${{ env.STACK_NAME }}-web"
        echo "üåê Web Application: $WEB_URL"
        echo "üîó API Endpoint: $API_URL"
        echo "üñ•Ô∏è Bastion host IP: $BASTION_IP"
        echo "üíæ Database: taskmanager_${{ env.BRANCH_NAME }}"
        echo "üîó SSH Tunnel: $TUNNEL_CMD"
        
    - name: Send SMS Notification
      run: |
        # Get SNS topic ARN
        SNS_TOPIC=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-shared-infrastructure \
          --query 'Stacks[0].Outputs[?OutputKey==`DeploymentNotificationTopicArn`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        # Send SMS notification
        aws sns publish \
          --topic-arn $SNS_TOPIC \
          --message "üöÄ TaskManager deployment complete!
        
        Branch: ${{ env.BRANCH_NAME }}
        API: $API_URL
        Database: taskmanager_${{ env.BRANCH_NAME }}
        Bastion IP: $BASTION_IP
        
        Ready for testing!" \
          --subject "TaskManager Deployed - ${{ env.BRANCH_NAME }}" \
          --region ${{ env.AWS_REGION }}
        
        echo "üì± SMS notification sent to 703-474-0324"
