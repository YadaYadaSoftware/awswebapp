# TaskManager CI/CD Pipeline - Shared Infrastructure + Branch Applications

name: Deploy Everything

on:
  push:
  pull_request:

env:
  AWS_REGION_SECONDARY: us-west-2
  AWS_REGION_PRIMARY: us-east-1
  ENGINE_VERSION: 8.0.mysql_aurora.3.10.0

jobs:
  get-branch-name:
    name: Get Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.get-branch.outputs.branch-name }}
    steps:
    - name: Get branch name
      id: get-branch
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

  build:
    name: Build and Test Applications
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      customVersion: ${{ steps.custom-version.outputs.custom-version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Unshallow repository if needed
      run: |
        if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
          echo "Repository is shallow, unshallowing..."
          git fetch --unshallow
        else
          echo "Repository is not shallow"
        fi

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true

    - name: Set Custom Version
      id: custom-version
      run: |
        MAJOR=${{ steps.gitversion.outputs.major }}
        MINOR=${{ steps.gitversion.outputs.minor }}
        PATCH=${{ steps.gitversion.outputs.patch }}
        BUILD=${{ steps.gitversion.outputs.buildMetaData }}
        CUSTOM_VERSION="$MAJOR.$MINOR.$PATCH.$BUILD"
        echo "custom-version=$CUSTOM_VERSION"
        echo "custom-version=$CUSTOM_VERSION" >> $GITHUB_OUTPUT
        echo "Using custom version: $CUSTOM_VERSION"

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        echo "Building with version: ${{ steps.custom-version.outputs.custom-version }}"
        dotnet build --no-restore --configuration Release /p:Version=${{ steps.custom-version.outputs.custom-version }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemVer }}

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release


    - name: Publish Web for Container
      run: |
        echo "Publishing Web with version: ${{ steps.custom-version.outputs.custom-version }}"
        dotnet publish src/TaskManager.Web2/TaskManager.Web2.csproj --configuration Release --output ./publish/web --runtime linux-x64 --self-contained false /p:Version=${{ steps.custom-version.outputs.custom-version }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }}



    - name: Create MySQL Lambda Layer
      run: |
        # Create layer directory structure
        mkdir -p python/lib/python3.9/site-packages

        # Install PyMySQL (pure Python MySQL driver)
        pip install PyMySQL -t python/lib/python3.9/site-packages/

        # Create layer ZIP file
        zip -r mysql-layer.zip python/

        echo "MySQL layer created successfully"

    - name: Upload MySQL Layer
      uses: actions/upload-artifact@v4
      with:
        name: mysql-layer-package
        path: mysql-layer.zip
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, get-branch-name]
    concurrency:
      group: deploy-${{ matrix.region }}-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    strategy:
      matrix:
        include:
          - region: us-east-1
            is_primary: "true"
            deploy: true
          - region: us-west-2
            is_primary: "false"
            deploy: ${{ contains(fromJson('["app","beta"]'), needs.get-branch-name.outputs.branch-name) }}
      max-parallel: 1
    steps:
    - name: Checkout code
      if: matrix.deploy
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate Source Checksum
      if: matrix.deploy
      id: checksum
      run: |
        # Calculate SHA256 checksum of all files in src/ directory
        SRC_CHECKSUM=$(find src -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
        echo "üìã Source checksum: $SRC_CHECKSUM"
        echo "src-checksum=$SRC_CHECKSUM" >> $GITHUB_OUTPUT

    - name: Install SAM CLI
      if: matrix.deploy
      run: |
        pip install aws-sam-cli

    - name: Configure AWS credentials
      if: matrix.deploy
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: Get AWS Account ID
      if: matrix.deploy
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS Account ID: $ACCOUNT_ID"
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT


    - name: Build and package master template
      if: matrix.deploy
      run: |
        BUCKET_NAME="cf-templates-${{ steps.account-id.outputs.account-id }}-${{ matrix.region }}"
        BRANCH_NAME="${{ needs.get-branch-name.outputs.branch-name }}"
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

        echo "Building and packaging master template to S3 bucket: $BUCKET_NAME"
        sam build --template infrastructure/master.template --region ${{ matrix.region }}
        sam package --template-file .aws-sam/build/template.yaml --s3-bucket $BUCKET_NAME --s3-prefix $BRANCH_NAME --output-template-file packaged-master-template.yaml --region ${{ matrix.region }}

        # Upload the packaged template as master-template.yaml for compatibility
        aws s3 cp packaged-master-template.yaml s3://$BUCKET_NAME/$BRANCH_NAME/master-template.yaml --region ${{ matrix.region }}
        TEMPLATE_VERSION_ID=$(aws s3api head-object --bucket $BUCKET_NAME --key $BRANCH_NAME/master-template.yaml --query VersionId --output text)
        echo "TEMPLATE_VERSION_ID=$TEMPLATE_VERSION_ID" >> $GITHUB_ENV

    - name: Check if Web Container Image Exists
      id: check-image
      if: matrix.deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ matrix.region }}
      run: |
        SRC_CHECKSUM=${{ steps.checksum.outputs.src-checksum }}
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}
        SEMVER_TAG=${{ needs.build.outputs.customVersion }}

        # Construct ECR repository URI
        ACCOUNT_ID=${{ steps.account-id.outputs.account-id }}
        ECR_REPO="${ACCOUNT_ID}.dkr.ecr.${{ matrix.region }}.amazonaws.com/ecr-${ACCOUNT_ID}-${{ matrix.region }}"

        echo "üéØ ECR repository: $ECR_REPO"
        echo "üìã Checksum tag: $SRC_CHECKSUM"
        echo "üè∑Ô∏è SemVer tag: $SEMVER_TAG"

        # Check if image with checksum tag already exists
        if aws ecr describe-images --repository-name ecr-${ACCOUNT_ID}-${{ matrix.region }} --image-ids imageTag=$SRC_CHECKSUM --region ${{ matrix.region }} >/dev/null 2>&1; then
          echo "‚úÖ Image $ECR_REPO:$SRC_CHECKSUM already exists, reusing"
          echo "image-exists=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Image $ECR_REPO:$SRC_CHECKSUM does not exist, will build"
          echo "image-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and Push Web Container Image
      if: matrix.deploy && steps.check-image.outputs.image-exists == 'false'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ matrix.region }}
      run: |
        SRC_CHECKSUM=${{ steps.checksum.outputs.src-checksum }}
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}
        SEMVER_TAG=${{ needs.build.outputs.customVersion }}
        BRANCH_TAG=${BRANCH_NAME:-main}

        # Construct ECR repository URI
        ACCOUNT_ID=${{ steps.account-id.outputs.account-id }}
        ECR_REPO="${ACCOUNT_ID}.dkr.ecr.${{ matrix.region }}.amazonaws.com/ecr-${ACCOUNT_ID}-${{ matrix.region }}"

        echo "üéØ ECR repository: $ECR_REPO"
        echo "üìã Checksum tag: $SRC_CHECKSUM"
        echo "üè∑Ô∏è SemVer tag: $SEMVER_TAG"
        echo "üåø Branch tag: $BRANCH_TAG"

        # Build container image from root context
        docker build -t taskmanager-web:$SRC_CHECKSUM -f src/TaskManager.Web2/Dockerfile . --build-arg VERSION=${{ needs.build.outputs.customVersion }} --build-arg ASSEMBLY_VERSION=${{ needs.build.outputs.assemblySemVer }}

        # Login to ECR
        aws ecr get-login-password --region ${{ matrix.region }} | docker login --username AWS --password-stdin $ECR_REPO

        # Tag and push checksum-tagged image
        docker tag taskmanager-web:$SRC_CHECKSUM $ECR_REPO:$SRC_CHECKSUM
        docker push $ECR_REPO:$SRC_CHECKSUM
        echo "‚úÖ Pushed checksum image: $ECR_REPO:$SRC_CHECKSUM"

        # Also tag and push with SemVer for reference
        docker tag taskmanager-web:$SRC_CHECKSUM $ECR_REPO:$SEMVER_TAG
        docker push $ECR_REPO:$SEMVER_TAG
        echo "‚úÖ Pushed SemVer image: $ECR_REPO:$SEMVER_TAG"

        # Tag and push branch-specific image (for easy reference)
        docker tag taskmanager-web:$SRC_CHECKSUM $ECR_REPO:$BRANCH_TAG
        docker push $ECR_REPO:$BRANCH_TAG
        echo "‚úÖ Pushed branch image: $ECR_REPO:$BRANCH_TAG"

        # Also tag as latest for main branch
        if [ "$BRANCH_NAME" = "main" ]; then
          docker tag taskmanager-web:$SRC_CHECKSUM $ECR_REPO:latest
          docker push $ECR_REPO:latest
          echo "‚úÖ Pushed latest image: $ECR_REPO:latest"
        fi

    - name: Set Container Image Variable
      if: matrix.deploy
      run: |
        SRC_CHECKSUM=${{ steps.checksum.outputs.src-checksum }}
        ACCOUNT_ID=${{ steps.account-id.outputs.account-id }}
        ECR_REPO="${ACCOUNT_ID}.dkr.ecr.${{ matrix.region }}.amazonaws.com/ecr-${ACCOUNT_ID}-${{ matrix.region }}"
        CONTAINER_IMAGE=$ECR_REPO:$SRC_CHECKSUM
        echo "CONTAINER_IMAGE=$CONTAINER_IMAGE" >> $GITHUB_ENV

    - name: Get primary region outputs for secondary
      id: get-primary-outputs
      if: matrix.is_primary == 'false' && matrix.deploy
      run: |
        echo "Getting outputs from primary region stack..."
        PRIMARY_STACK_NAME="taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-us-east-1"
        KMS_KEY_ARN=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`AuroraKmsKeyArn`].OutputValue' --output text)
        GLOBAL_CLUSTER_ID=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`AuroraGlobalClusterId`].OutputValue' --output text)
        PRIMARY_LB_DNS=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerDNS`].OutputValue' --output text)
        PRIMARY_LB_HZ=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerHostedZoneId`].OutputValue' --output text)
        echo "kms-key-arn=$KMS_KEY_ARN" >> $GITHUB_OUTPUT
        echo "global-cluster-id=$GLOBAL_CLUSTER_ID" >> $GITHUB_OUTPUT
        echo "primary-lb-dns=$PRIMARY_LB_DNS" >> $GITHUB_OUTPUT
        echo "primary-lb-hz=$PRIMARY_LB_HZ" >> $GITHUB_OUTPUT


    - name: Set parameter overrides
      id: set-params
      if: matrix.deploy
      run: |
        BRANCH_NAME="${{ needs.get-branch-name.outputs.branch-name }}"
        if [ "$BRANCH_NAME" = "app" ]; then
          MIN_CAP=0.5
          MAX_CAP=4
        else
          MIN_CAP=0
          MAX_CAP=1
        fi
        if [[ " app beta " == *" $BRANCH_NAME "* ]]; then
          ENABLE_GLOBAL=true
        else
          ENABLE_GLOBAL=false
        fi
        BASE_PARAMS="TemplateBucket=${{ env.BUCKET_NAME }},GitHubActionsUserArn=${{ secrets.USER_ARN }},BranchName=${{ needs.get-branch-name.outputs.branch-name }},DatabasePassword=${{ secrets.DATABASE_PASSWORD }},EngineVersion=${{ env.ENGINE_VERSION }},IsPrimaryRegion=${{ matrix.is_primary }},MinCapacity=$MIN_CAP,MaxCapacity=$MAX_CAP,EnableGlobalCluster=$ENABLE_GLOBAL,GoogleOAuthClientId=${{ secrets.GOOGLE_CLIENT_ID }},GoogleOAuthClientSecret=${{ secrets.GOOGLE_CLIENT_SECRET }},WebContainerImage=${{ env.CONTAINER_IMAGE }},DeploymentToken=${{ github.sha }},DomainName=appcloud.systems,HostedZoneId=Z06422172SASV44F5Y8VA"
        if [ "${{ matrix.is_primary }}" = "false" ]; then
          BASE_PARAMS="$BASE_PARAMS,AuroraGlobalClusterId=${{ steps.get-primary-outputs.outputs.global-cluster-id }},KmsKeyArn=${{ steps.get-primary-outputs.outputs.kms-key-arn }},PrimaryRegion=${{ env.AWS_REGION_PRIMARY }},PrimaryWebLoadBalancerDNS=${{ steps.get-primary-outputs.outputs.primary-lb-dns }},PrimaryWebLoadBalancerHostedZoneId=${{ steps.get-primary-outputs.outputs.primary-lb-hz }}"
        fi
        PARAMS="$BASE_PARAMS"
        echo "params=$PARAMS" >> $GITHUB_OUTPUT

    - name: Deploy master template
      id: deploy-master
      if: matrix.deploy
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-${{ matrix.region }}
        template: https://s3.amazonaws.com/cf-templates-${{ steps.account-id.outputs.account-id }}-${{ matrix.region }}/${{ needs.get-branch-name.outputs.branch-name }}/master-template.yaml?versionId=${{ env.TEMPLATE_VERSION_ID }}
        parameter-overrides: ${{ steps.set-params.outputs.params }}
        capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 90