# TaskManager CI/CD Pipeline - Shared Infrastructure + Branch Applications

name: Deploy Everything

on:
  push:
  pull_request:

env:
  AWS_REGION_SECONDARY: us-west-2
  AWS_REGION_PRIMARY: us-east-1
  ENGINE_VERSION: 8.0.mysql_aurora.3.10.0

jobs:
  get-branch-name:
    name: Get Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.get-branch.outputs.branch-name }}
    steps:
    - name: Get branch name
      id: get-branch
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

  deploy-kms-primary:
    name: Deploy KMS Primary Key
    needs: [get-branch-name]
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-kms-primary-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    outputs:
      aurora-kms-key-arn: ${{ steps.deploy-kms.outputs.AuroraKmsKeyArn }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Get GitHub Actions User ARN from IAM Setup Stack
      id: get-github-user
      run: |
        echo "🔍 Retrieving GitHub Actions User ARN from IAM setup stack in us-east-1..."

        # Get the user ARN from the IAM setup stack export
        GITHUB_USER_ARN=$(aws cloudformation list-exports \
          --region us-east-1 \
          --query "Exports[?Name=='TaskManager-GitHubActionsUserArn'].Value" \
          --output text)

        if [ -z "$GITHUB_USER_ARN" ] || [ "$GITHUB_USER_ARN" = "None" ]; then
          echo "❌ ERROR: Could not retrieve GitHub Actions User ARN from IAM setup stack"
          echo "Please ensure the github-actions-iam-setup stack is deployed in us-east-1"
          exit 1
        fi

        echo "✅ Retrieved GitHub Actions User ARN: $GITHUB_USER_ARN"
        echo "github-actions-user-arn=$GITHUB_USER_ARN" >> $GITHUB_OUTPUT

    - name: deploy (kms-template)
      id: deploy-kms
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-kms-primary
        template: infrastructure/kms-template.yaml
        parameter-overrides: GitHubActionsUserArn=${{ steps.get-github-user.outputs.github-actions-user-arn }},BranchName=${{ needs.get-branch-name.outputs.branch-name }}
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 10

  deploy-kms-replicas:
    name: Deploy KMS Key Replicas
    needs: [deploy-kms-primary, get-branch-name]
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-kms-replicas-${{ matrix.region }}-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    strategy:
      matrix:
        region: [us-west-2]
    outputs:
      aurora-kms-key-arn: ${{ steps.deploy-kms-replica.outputs.AuroraKmsKeyReplicaArn }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: Get GitHub Actions User ARN from IAM Setup Stack
      id: get-github-user
      run: |
        echo "🔍 Retrieving GitHub Actions User ARN from IAM setup stack in us-east-1..."

        # Get the user ARN from the IAM setup stack export
        GITHUB_USER_ARN=$(aws cloudformation list-exports \
          --region us-east-1 \
          --query "Exports[?Name=='TaskManager-GitHubActionsUserArn'].Value" \
          --output text)

        if [ -z "$GITHUB_USER_ARN" ] || [ "$GITHUB_USER_ARN" = "None" ]; then
          echo "❌ ERROR: Could not retrieve GitHub Actions User ARN from IAM setup stack"
          echo "Please ensure the github-actions-iam-setup stack is deployed in us-east-1"
          exit 1
        fi

        echo "✅ Retrieved GitHub Actions User ARN: $GITHUB_USER_ARN"
        echo "github-actions-user-arn=$GITHUB_USER_ARN" >> $GITHUB_OUTPUT

    - name: deploy (regional-kms-replica)
      id: deploy-kms-replica
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-regional-kms-replica
        template: infrastructure/regional-kms-replica.yaml
        parameter-overrides: PrimaryKeyArn=${{ needs.deploy-kms-primary.outputs.aurora-kms-key-arn }},GitHubActionsUserArn=${{ steps.get-github-user.outputs.github-actions-user-arn }},BranchName=${{ needs.get-branch-name.outputs.branch-name }}
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 10

  deploy-regional-vpc:
    name: Deploy Regional VPC
    needs: [get-branch-name]
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-regional-vpc-${{ matrix.region }}-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    strategy:
      matrix:
        region: [us-east-1, us-west-2]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: deploy (regional-containers-vpc)
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-regional-containers-vpc
        template: infrastructure/regional-containers-vpc.yaml
        parameter-overrides: BranchName=${{ needs.get-branch-name.outputs.branch-name }},LogRetentionDays=7
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 10
  build:
    name: Build and Test Applications
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Unshallow repository if needed
      run: |
        if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
          echo "Repository is shallow, unshallowing..."
          git fetch --unshallow
        else
          echo "Repository is not shallow"
        fi

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        echo "Building with version: ${{ steps.gitversion.outputs.semVer }}"
        dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemVer }}

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Publish API for Lambda
      run: |
        echo "Publishing API with version: ${{ steps.gitversion.outputs.semVer }}"
        dotnet publish src/TaskManager.Api/TaskManager.Api.csproj --configuration Release --output ./publish/api --runtime linux-x64 --self-contained false /p:Version=${{ steps.gitversion.outputs.semVer }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }}

    - name: Publish Web for Container
      run: |
        echo "Publishing Web with version: ${{ steps.gitversion.outputs.semVer }}"
        dotnet publish src/TaskManager.Web2/TaskManager.Web2.csproj --configuration Release --output ./publish/web --runtime linux-x64 --self-contained false /p:Version=${{ steps.gitversion.outputs.semVer }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }}

    - name: Create API Lambda deployment package
      run: |
        cd ./publish/api
        zip -r ../../api-lambda-deployment.zip .

    - name: Upload API Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: api-lambda-package
        path: api-lambda-deployment.zip

    - name: Create MySQL Lambda Layer
      run: |
        # Create layer directory structure
        mkdir -p python/lib/python3.9/site-packages

        # Install PyMySQL (pure Python MySQL driver)
        pip install PyMySQL -t python/lib/python3.9/site-packages/

        # Create layer ZIP file
        zip -r mysql-layer.zip python/

        echo "MySQL layer created successfully"

    - name: Upload MySQL Layer
      uses: actions/upload-artifact@v4
      with:
        name: mysql-layer-package
        path: mysql-layer.zip



  deploy-global:
    name: Deploy Global Infrastructure
    runs-on: ubuntu-latest
    needs: [deploy-kms-replicas, deploy-regional-vpc, get-branch-name]
    concurrency:
      group: deploy-global-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    outputs:
      shared-lambda-role-arn: ${{ steps.deploy-global.outputs.SharedLambdaRoleArn }}
      aurora-global-cluster-id: ${{ steps.deploy-global.outputs.AuroraGlobalClusterId }}
      vpc-flow-logs-role-arn: ${{ steps.deploy-global.outputs.VPCFlowLogsRoleArn }}
      api-gateway-cloudwatch-logs-role-arn: ${{ steps.deploy-global.outputs.ApiGatewayCloudWatchLogsRoleArn }}
      github-actions-user-arn: ${{ steps.get-github-user.outputs.github-actions-user-arn }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Get GitHub Actions User ARN from IAM Setup Stack
      id: get-github-user
      run: |
        echo "🔍 Retrieving GitHub Actions User ARN from IAM setup stack in us-east-1..."

        # Get the user ARN from the IAM setup stack export
        GITHUB_USER_ARN=$(aws cloudformation list-exports \
          --region us-east-1 \
          --query "Exports[?Name=='TaskManager-GitHubActionsUserArn'].Value" \
          --output text)

        if [ -z "$GITHUB_USER_ARN" ] || [ "$GITHUB_USER_ARN" = "None" ]; then
          echo "❌ ERROR: Could not retrieve GitHub Actions User ARN from IAM setup stack"
          echo "Please ensure the github-actions-iam-setup stack is deployed in us-east-1"
          exit 1
        fi

        echo "✅ Retrieved GitHub Actions User ARN: $GITHUB_USER_ARN"
        echo "github-actions-user-arn=$GITHUB_USER_ARN" >> $GITHUB_OUTPUT

    - name: deploy (global-template)
      id: deploy-global
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-global-infrastructure-${{ needs.get-branch-name.outputs.branch-name }}
        template: infrastructure/global-template.yaml
        parameter-overrides: DatabasePassword=${{ secrets.DATABASE_PASSWORD }},EngineVersion=${{ env.ENGINE_VERSION }},GitHubActionsUserArn=${{ steps.get-github-user.outputs.github-actions-user-arn }},BranchName=${{ needs.get-branch-name.outputs.branch-name }}
        capabilities: "CAPABILITY_NAMED_IAM"
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 20
  deploy-regional-vpc-db:
    name: Deploy Regional VPC and DB
    runs-on: ubuntu-latest
    needs: [deploy-global, deploy-kms-replicas, get-branch-name]
    concurrency:
      group: deploy-regional-vpc-db-${{ matrix.region }}-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    strategy:
      max-parallel: 1
      matrix:
        region: [us-east-1, us-west-2]  # Primary region first
        include:
          - region: us-east-1
            is_primary: "true"
          - region: us-west-2
            is_primary: "false"
    outputs:
      db-endpoint: ${{ steps.deploy-regional-db.outputs.DatabaseEndpoint }}
      db-reader-endpoint: ${{ steps.deploy-regional-db.outputs.DatabaseReaderEndpoint }}
      db-username: ${{ steps.deploy-regional-db.outputs.DatabaseUsername }}
      db-engine: ${{ steps.deploy-regional-db.outputs.DatabaseEngine }}
      db-host: ${{ steps.deploy-regional-db.outputs.DatabaseHost }}
      db-port: ${{ steps.deploy-regional-db.outputs.DatabasePort }}
      db-name: ${{ steps.deploy-regional-db.outputs.DatabaseName }}
      db-cluster-arn: ${{ steps.deploy-regional-db.outputs.DatabaseClusterArn }}
      db-password-secret-arn: ${{ steps.deploy-regional-db.outputs.DatabasePasswordSecretArn }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: Get VPC Stack Outputs
      id: get-vpc-outputs
      run: |
        echo "Getting VPC stack outputs..."
        STACK_NAME="taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-regional-containers-vpc"
        VPC_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`VPCId`].OutputValue' --output text)
        PRIVATE_SUBNET_1=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`PrivateSubnet1Id`].OutputValue' --output text)
        PRIVATE_SUBNET_2=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`PrivateSubnet2Id`].OutputValue' --output text)
        RDS_SG=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`RDSSecurityGroupId`].OutputValue' --output text)

        echo "VPC_ID: $VPC_ID"
        echo "PRIVATE_SUBNET_1: $PRIVATE_SUBNET_1"
        echo "PRIVATE_SUBNET_2: $PRIVATE_SUBNET_2"
        echo "RDS_SG: $RDS_SG"

        echo "vpc-id=$VPC_ID" >> $GITHUB_OUTPUT
        echo "private-subnet-1=$PRIVATE_SUBNET_1" >> $GITHUB_OUTPUT
        echo "private-subnet-2=$PRIVATE_SUBNET_2" >> $GITHUB_OUTPUT
        echo "rds-sg=$RDS_SG" >> $GITHUB_OUTPUT

    - name: Upload regional templates to S3
      run: |
        echo "Uploading regional templates to S3..."
        aws s3 cp infrastructure/regional-db.yaml s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }}/ --region ${{ matrix.region }}

    - name: Set regional stack names
      run: |
        echo "REGIONAL_DB_STACK_NAME=taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-regional-db" >> $GITHUB_ENV

    - name: deploy (regional-db)
      id: deploy-regional-db
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.REGIONAL_DB_STACK_NAME }}
        template: infrastructure/regional-db.yaml
        parameter-overrides: BranchName=${{ needs.get-branch-name.outputs.branch-name }},DatabasePassword=${{ secrets.DATABASE_PASSWORD }},EngineVersion=${{ env.ENGINE_VERSION }},AuroraGlobalClusterId=${{ needs.deploy-global.outputs.aurora-global-cluster-id }},AuroraKmsKeyArn=${{ matrix.region == 'us-east-1' && needs.deploy-kms-replicas.outputs['us-east-1'].aurora-kms-key-arn || needs.deploy-kms-replicas.outputs['us-west-2'].aurora-kms-key-arn }},IsPrimaryRegion=${{ matrix.is_primary }},GitHubActionsUserArn=${{ needs.deploy-global.outputs.github-actions-user-arn }},VPCId=${{ steps.get-vpc-outputs.outputs.vpc-id }},PrivateSubnet1Id=${{ steps.get-vpc-outputs.outputs.private-subnet-1 }},PrivateSubnet2Id=${{ steps.get-vpc-outputs.outputs.private-subnet-2 }},RDSSecurityGroupId=${{ steps.get-vpc-outputs.outputs.rds-sg }},LogRetentionDays=7
        capabilities: "CAPABILITY_NAMED_IAM"
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 30

  deploy-regional:
    name: Deploy Regional Stack
    runs-on: ubuntu-latest
    needs: [build, deploy-regional-vpc-db, deploy-kms-replicas, get-branch-name]
    concurrency:
      group: deploy-regional-${{ matrix.region }}-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    strategy:
      matrix:
        region: [us-east-1, us-west-2]  # Primary region first
        include:
          - region: us-east-1
            is_primary: "true"
          - region: us-west-2
            is_primary: "false"
    outputs:
      ecs-cluster-name: ${{ steps.deploy-regional.outputs.ECSClusterName }}
      api-endpoint: ${{ steps.deploy-api.outputs.ApiEndpoint }}
      web-endpoint: ${{ steps.deploy-web.outputs.WebEndpoint }}
      web-load-balancer-dns: ${{ steps.deploy-web.outputs.WebLoadBalancerDNS }}
      web-load-balancer-hosted-zone-id: ${{ steps.deploy-web.outputs.WebLoadBalancerHostedZoneId }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: Echo GitHub Actions User ARN
      run: |
        echo "🔑 GitHub Actions User ARN: ${{ needs.deploy-global.outputs.github-actions-user-arn }}"

    - name: Get VPC Stack Outputs
      id: get-vpc-outputs
      run: |
        echo "Getting VPC stack outputs..."
        STACK_NAME="taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-regional-containers-vpc"
        VPC_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`VPCId`].OutputValue' --output text)
        PRIVATE_SUBNET_1=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`PrivateSubnet1Id`].OutputValue' --output text)
        PRIVATE_SUBNET_2=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`PrivateSubnet2Id`].OutputValue' --output text)
        PUBLIC_SUBNET_1=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`PublicSubnet1Id`].OutputValue' --output text)
        PUBLIC_SUBNET_2=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`PublicSubnet2Id`].OutputValue' --output text)
        LAMBDA_SG=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`LambdaSecurityGroupId`].OutputValue' --output text)
        ALB_SG=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`ALBSecurityGroupId`].OutputValue' --output text)
        ECS_SG=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`ECSTaskSecurityGroupId`].OutputValue' --output text)
        RDS_SG=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ matrix.region }} --query 'Stacks[0].Outputs[?OutputKey==`RDSSecurityGroupId`].OutputValue' --output text)

        echo "vpc-id=$VPC_ID" >> $GITHUB_OUTPUT
        echo "private-subnet-1=$PRIVATE_SUBNET_1" >> $GITHUB_OUTPUT
        echo "private-subnet-2=$PRIVATE_SUBNET_2" >> $GITHUB_OUTPUT
        echo "public-subnet-1=$PUBLIC_SUBNET_1" >> $GITHUB_OUTPUT
        echo "public-subnet-2=$PUBLIC_SUBNET_2" >> $GITHUB_OUTPUT
        echo "lambda-sg=$LAMBDA_SG" >> $GITHUB_OUTPUT
        echo "alb-sg=$ALB_SG" >> $GITHUB_OUTPUT
        echo "ecs-sg=$ECS_SG" >> $GITHUB_OUTPUT
        echo "rds-sg=$RDS_SG" >> $GITHUB_OUTPUT

    - name: Upload templates and regional layers to S3
      run: |
        # Upload infrastructure templates to S3
        echo "Uploading infrastructure templates to S3..."
        aws s3 cp infrastructure/regional-infrastructure.yaml s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }}/ --region ${{ matrix.region }}

        # Verify uploads
        echo "Verifying S3 uploads..."
        aws s3 ls s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }}/ --region ${{ matrix.region }}

    - name: Validate Parameter Values
      run: |
        echo "🔍 Debug: Parameter values being passed to CloudFormation:"
        echo "DatabasePassword: [REDACTED]"
        echo "SharedLambdaRoleArn: ${{ needs.deploy-global.outputs.shared-lambda-role-arn }}"
        echo "AuroraGlobalClusterId: ${{ needs.deploy-global.outputs.aurora-global-cluster-id }}"
        echo "DatabaseHost: ${{ needs.deploy-regional-vpc-db.outputs.db-host }}"
        echo "DatabaseUsername: ${{ needs.deploy-regional-vpc-db.outputs.db-username }}"
        echo "DatabaseName: ${{ needs.deploy-regional-vpc-db.outputs.db-name }}"
        echo "DatabasePasswordSecretArn: ${{ needs.deploy-regional-vpc-db.outputs.db-password-secret-arn }}"

        # Validate that job outputs are not empty
        if [ -z "${{ needs.deploy-global.outputs.shared-lambda-role-arn }}" ]; then
          echo "❌ ERROR: SharedLambdaRoleArn is empty"
          exit 1
        fi

        if [ -z "${{ needs.deploy-global.outputs.aurora-global-cluster-id }}" ]; then
          echo "❌ ERROR: AuroraGlobalClusterId is empty"
          exit 1
        fi

        if [ -z "${{ needs.deploy-regional-vpc-db.outputs.db-host }}" ]; then
          echo "❌ ERROR: DatabaseHost is empty"
          exit 1
        fi

        if [ -z "${{ needs.deploy-regional-vpc-db.outputs.db-password-secret-arn }}" ]; then
          echo "❌ ERROR: DatabasePasswordSecretArn is empty"
          exit 1
        fi

        echo "✅ All parameter values are present, proceeding with deployment..."

    - name: deploy (regional-infrastructure)
      id: deploy-regional
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-regional-infrastructure
        template: infrastructure/regional-infrastructure.yaml
        parameter-overrides: BranchName=${{ needs.get-branch-name.outputs.branch-name }},DatabasePassword=${{ secrets.DATABASE_PASSWORD }},SharedLambdaRoleArn=${{ needs.deploy-global.outputs.shared-lambda-role-arn }},AuroraGlobalClusterId=${{ needs.deploy-global.outputs.aurora-global-cluster-id }},AuroraKmsKeyArn=${{ matrix.region == 'us-east-1' && needs.deploy-kms-replicas.outputs['us-east-1'].aurora-kms-key-arn || needs.deploy-kms-replicas.outputs['us-west-2'].aurora-kms-key-arn }},EngineVersion=${{ env.ENGINE_VERSION }},VPCId=${{ steps.get-vpc-outputs.outputs.vpc-id }},PrivateSubnet1Id=${{ steps.get-vpc-outputs.outputs.private-subnet-1 }},PrivateSubnet2Id=${{ steps.get-vpc-outputs.outputs.private-subnet-2 }},PublicSubnet1Id=${{ steps.get-vpc-outputs.outputs.public-subnet-1 }},PublicSubnet2Id=${{ steps.get-vpc-outputs.outputs.public-subnet-2 }},LambdaSecurityGroupId=${{ steps.get-vpc-outputs.outputs.lambda-sg }},RDSSecurityGroupId=${{ steps.get-vpc-outputs.outputs.rds-sg }},ALBSecurityGroupId=${{ steps.get-vpc-outputs.outputs.alb-sg }},ECSTaskSecurityGroupId=${{ steps.get-vpc-outputs.outputs.ecs-sg }},DatabaseEndpoint=${{ needs.deploy-regional-vpc-db.outputs.db-endpoint }},DatabaseReaderEndpoint=${{ needs.deploy-regional-vpc-db.outputs.db-reader-endpoint }},GoogleOAuthClientId=${{ secrets.GOOGLE_CLIENT_ID }},GoogleOAuthClientSecret=${{ secrets.GOOGLE_CLIENT_SECRET }},ApiGatewayCloudWatchLogsRoleArn=${{ needs.deploy-global.outputs.api-gateway-cloudwatch-logs-role-arn }}
        capabilities: "CAPABILITY_NAMED_IAM"
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 20
    - name: Get AWS Account ID
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Build and Push Web Container Image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ matrix.region }}
      run: |
        # Use GitVersion for unique image tagging
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}
        IMAGE_TAG=${{ needs.build.outputs.semVer }}
        BRANCH_TAG=${BRANCH_NAME:-main}

        # Construct ECR repository URI
        ACCOUNT_ID=${{ steps.account-id.outputs.account-id }}
        ECR_REPO="${ACCOUNT_ID}.dkr.ecr.${{ matrix.region }}.amazonaws.com/taskmanager-web-${{ matrix.region }}"

        echo "🎯 ECR repository: $ECR_REPO"
        echo "🏷️ Version tag: $IMAGE_TAG"
        echo "🌿 Branch tag: $BRANCH_TAG"

        # Build container image from root context
        docker build -t taskmanager-web:$IMAGE_TAG -f src/TaskManager.Web2/Dockerfile . --build-arg VERSION=${{ needs.build.outputs.semVer }} --build-arg ASSEMBLY_VERSION=${{ needs.build.outputs.assemblySemVer }}

        # Login to ECR
        aws ecr get-login-password --region ${{ matrix.region }} | docker login --username AWS --password-stdin $ECR_REPO

        # Tag and push versioned image
        docker tag taskmanager-web:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG
        docker push $ECR_REPO:$IMAGE_TAG
        echo "✅ Pushed versioned image: $ECR_REPO:$IMAGE_TAG"

        # Tag and push branch-specific image (for easy reference)
        docker tag taskmanager-web:$IMAGE_TAG $ECR_REPO:$BRANCH_TAG
        docker push $ECR_REPO:$BRANCH_TAG
        echo "✅ Pushed branch image: $ECR_REPO:$BRANCH_TAG"

        # Also tag as latest for main branch
        if [ "$BRANCH_NAME" = "main" ]; then
          docker tag taskmanager-web:$IMAGE_TAG $ECR_REPO:latest
          docker push $ECR_REPO:latest
          echo "✅ Pushed latest image: $ECR_REPO:latest"
        fi

        CONTAINER_IMAGE=$ECR_REPO:$IMAGE_TAG
        echo "CONTAINER_IMAGE=$CONTAINER_IMAGE" >> $GITHUB_ENV

    - name: Get branch name for stack naming
      run: |
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}
        STACK_PREFIX="taskmanager-${BRANCH_NAME}"
        echo "Branch: $BRANCH_NAME"
        echo "Stack name: $STACK_PREFIX"
        echo "STACK_PREFIX=$STACK_PREFIX" >> $GITHUB_ENV
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Download Lambda packages
      uses: actions/download-artifact@v4
      with:
        name: api-lambda-package
        path: ./artifacts/

    - name: Download MySQL Layer
      uses: actions/download-artifact@v4
      with:
        name: mysql-layer-package
        path: ./artifacts/

    - name: Upload templates and packages to S3
      run: |
        # Debug: List downloaded artifacts
        echo "Downloaded artifacts:"
        ls -la ./artifacts/

        # Upload Lambda deployment packages
        aws s3 cp ./artifacts/api-lambda-deployment.zip s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }}/api-lambda-deployment.zip --region ${{ matrix.region }}

        # Upload MySQL layer
        aws s3 cp ./artifacts/mysql-layer.zip s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }}/mysql-layer.zip --region ${{ matrix.region }}

        # Verify uploads
        echo "S3 bucket contents:"
        aws s3 ls s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }}/ --region ${{ matrix.region }} | grep -E "(api-lambda-deployment|mysql-layer)"

    - name: deploy (api-template)
      id: deploy-api
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.STACK_PREFIX }}-api
        template: src/TaskManager.Api/api-template.yaml
        parameter-overrides: Environment=${{ needs.get-branch-name.outputs.branch-name }},ApiCodeBucket=taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ matrix.region }},SharedLambdaRoleArn=${{ needs.deploy-global.outputs.shared-lambda-role-arn }},DatabaseHost=${{ needs.deploy-regional-vpc-db.outputs.db-host }},DatabaseUsername=${{ needs.deploy-regional-vpc-db.outputs.db-username }},DatabaseEngine=${{ needs.deploy-regional-vpc-db.outputs.db-engine }},DatabasePort=${{ needs.deploy-regional-vpc-db.outputs.db-port }},DatabaseName=${{ needs.deploy-regional-vpc-db.outputs.db-name }},DatabaseClusterArn=${{ needs.deploy-regional-vpc-db.outputs.db-cluster-arn }},DatabasePasswordSecretArn=${{ needs.deploy-regional-vpc-db.outputs.db-password-secret-arn }},LambdaSecurityGroupId=${{ steps.get-vpc-outputs.outputs.lambda-sg }},PrivateSubnet1Id=${{ steps.get-vpc-outputs.outputs.private-subnet-1 }},PrivateSubnet2Id=${{ steps.get-vpc-outputs.outputs.private-subnet-2 }}
        capabilities: "CAPABILITY_IAM"
        no-fail-on-empty-changeset: "1"
      timeout-minutes: 15

    - name: deploy (web-template)
      id: deploy-web
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.STACK_PREFIX }}-web
        template: src/TaskManager.Web2/web-template.yaml
        parameter-overrides: Environment=${{ needs.get-branch-name.outputs.branch-name }},WebContainerImage=${{ env.CONTAINER_IMAGE }},DeploymentToken=${{ github.sha }},DomainName=appcloud.systems,HostedZoneId=Z06422172SASV44F5Y8VA,SharedLambdaRoleArn=${{ needs.deploy-global.outputs.shared-lambda-role-arn }},VPCId=${{ steps.get-vpc-outputs.outputs.vpc-id }},ALBSecurityGroupId=${{ steps.get-vpc-outputs.outputs.alb-sg }},ECSTaskSecurityGroupId=${{ steps.get-vpc-outputs.outputs.ecs-sg }},PublicSubnet1Id=${{ steps.get-vpc-outputs.outputs.public-subnet-1 }},PublicSubnet2Id=${{ steps.get-vpc-outputs.outputs.public-subnet-2 }},PrivateSubnet1Id=${{ steps.get-vpc-outputs.outputs.private-subnet-1 }},PrivateSubnet2Id=${{ steps.get-vpc-outputs.outputs.private-subnet-2 }},ECSClusterName=${{ steps.deploy-regional.outputs.ECSClusterName }},GoogleOAuthSecretArn=${{ steps.deploy-regional.outputs.GoogleOAuthSecretArn }},DatabaseHost=${{ needs.deploy-regional-vpc-db.outputs.db-host }},DatabaseUsername=${{ needs.deploy-regional-vpc-db.outputs.db-username }},DatabaseEngine=${{ needs.deploy-regional-vpc-db.outputs.db-engine }},DatabasePort=${{ needs.deploy-regional-vpc-db.outputs.db-port }},DatabaseName=${{ needs.deploy-regional-vpc-db.outputs.db-name }},DatabaseClusterArn=${{ needs.deploy-regional-vpc-db.outputs.db-cluster-arn }},DatabasePasswordSecretArn=${{ needs.deploy-regional-vpc-db.outputs.db-password-secret-arn }}
        capabilities: "CAPABILITY_IAM"
        no-fail-on-empty-changeset: "1"
      timeout-minutes: 15

    # Database setup removed - now handled automatically by Entity Framework
    # EF will create the database and run migrations when the API first starts

    - name: Get deployment outputs
      id: get-endpoints
      run: |
        echo "Getting deployment outputs from stack outputs..."

        # Get API endpoint from API stack outputs
        API_URL="${{ steps.deploy-api.outputs.ApiEndpoint }}"

        if [ -z "$API_URL" ]; then
          echo "❌ API endpoint not found in stack outputs"
          exit 1
        fi
        echo "✅ API endpoint: $API_URL"

        # Get Web endpoint from Web stack outputs
        WEB_URL="${{ steps.deploy-web.outputs.WebLoadBalancerDNS }}"

        if [ -z "$WEB_URL" ]; then
          echo "⚠️ Web endpoint not found in stack outputs"
          WEB_URL=""
        else
          echo "✅ Web endpoint: $WEB_URL"
        fi

        # Extract API Gateway ID from URL
        API_GATEWAY_ID=$(echo $API_URL | sed 's|https://||' | sed 's|\.execute-api.*||')

        echo "🚀 TaskManager (${{ needs.get-branch-name.outputs.branch-name }}) deployed successfully in ${{ matrix.region }}!"
        echo "📋 API Stack: ${{ env.STACK_PREFIX }}-api ✅ Endpoint: $API_URL"
        echo "📋 Web Stack: ${{ env.STACK_PREFIX }}-web ✅ Load Balancer: $WEB_URL"
        echo "💾 Database: taskmanager_${{ needs.get-branch-name.outputs.branch-name }} ✅ Auto-created by EF"

        # Set outputs for other jobs
        echo "api-endpoint=$API_URL" >> $GITHUB_OUTPUT
        echo "web-endpoint=$WEB_URL" >> $GITHUB_OUTPUT
        echo "api-gateway-id=$API_GATEWAY_ID" >> $GITHUB_OUTPUT

    - name: Send SMS Notification
      run: |
        # Note: SMS notification disabled as SNS topic is not defined in global template
        echo "📱 SMS notification skipped - SNS topic not configured in global infrastructure"
        echo "🚀 TaskManager deployment complete! Branch: ${{ needs.get-branch-name.outputs.branch-name }} Region: ${{ matrix.region }} API: $API_URL Web App: https://$BRANCH_NAME.appcloud.systems Database: taskmanager_${{ needs.get-branch-name.outputs.branch-name }} ✅ Auto-created by EF Both API and Web are fully deployed and running!"




  deploy-global-dns:
    name: Deploy Global DNS Failover
    runs-on: ubuntu-latest
    needs: [deploy-regional, get-branch-name]
    if: needs.deploy-regional.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Upload Global DNS template to S3
      run: |
        echo "Uploading global DNS template to S3..."
        aws s3 cp infrastructure/global-dns-template.yaml s3://taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-templates-bucket-${{ env.AWS_REGION_PRIMARY }}/ --region ${{ env.AWS_REGION_PRIMARY }}

    - name: Get Load Balancer Details
      id: get-lb-details
      run: |
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}

        # Get primary load balancer details
        PRIMARY_DNS=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-web \
          --region ${{ env.AWS_REGION_PRIMARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerDNS`].OutputValue' \
          --output text)

        PRIMARY_HZ=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-web \
          --region ${{ env.AWS_REGION_PRIMARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerHostedZoneId`].OutputValue' \
          --output text)

        # Get secondary load balancer details
        SECONDARY_DNS=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-web \
          --region ${{ env.AWS_REGION_SECONDARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerDNS`].OutputValue' \
          --output text)

        SECONDARY_HZ=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-web \
          --region ${{ env.AWS_REGION_SECONDARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerHostedZoneId`].OutputValue' \
          --output text)

        echo "Primary DNS: $PRIMARY_DNS"
        echo "Primary HZ: $PRIMARY_HZ"
        echo "Secondary DNS: $SECONDARY_DNS"
        echo "Secondary HZ: $SECONDARY_HZ"

        echo "primary-web-load-balancer-dns=$PRIMARY_DNS" >> $GITHUB_OUTPUT
        echo "primary-web-load-balancer-hosted-zone-id=$PRIMARY_HZ" >> $GITHUB_OUTPUT
        echo "secondary-web-load-balancer-dns=$SECONDARY_DNS" >> $GITHUB_OUTPUT
        echo "secondary-web-load-balancer-hosted-zone-id=$SECONDARY_HZ" >> $GITHUB_OUTPUT

    - name: deploy (global-dns-template)
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-global-dns
        template: infrastructure/global-dns-template.yaml
        parameter-overrides: Environment=${{ needs.get-branch-name.outputs.branch-name }},DomainName=appcloud.systems,HostedZoneId=Z06422172SASV44F5Y8VA,PrimaryRegion=${{ env.AWS_REGION_PRIMARY }},SecondaryRegion=${{ env.AWS_REGION_SECONDARY }},PrimaryWebLoadBalancerDNS=${{ steps.get-lb-details.outputs.primary-web-load-balancer-dns }},PrimaryWebLoadBalancerHostedZoneId=${{ steps.get-lb-details.outputs.primary-web-load-balancer-hosted-zone-id }},SecondaryWebLoadBalancerDNS=${{ steps.get-lb-details.outputs.secondary-web-load-balancer-dns }},SecondaryWebLoadBalancerHostedZoneId=${{ steps.get-lb-details.outputs.secondary-web-load-balancer-hosted-zone-id }}
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 10

