# TaskManager CI/CD Pipeline - Shared Infrastructure + Branch Applications

name: Deploy Everything

on:
  push:
  pull_request:

env:
  AWS_REGION_SECONDARY: us-west-2
  AWS_REGION_PRIMARY: us-east-1
  ENGINE_VERSION: 8.0.mysql_aurora.3.10.0

jobs:
  get-branch-name:
    name: Get Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.get-branch.outputs.branch-name }}
    steps:
    - name: Get branch name
      id: get-branch
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

  build:
    name: Build and Test Applications
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Unshallow repository if needed
      run: |
        if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
          echo "Repository is shallow, unshallowing..."
          git fetch --unshallow
        else
          echo "Repository is not shallow"
        fi

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        echo "Building with version: ${{ steps.gitversion.outputs.semVer }}"
        dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemVer }}

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release


    - name: Publish Web for Container
      run: |
        echo "Publishing Web with version: ${{ steps.gitversion.outputs.semVer }}"
        dotnet publish src/TaskManager.Web2/TaskManager.Web2.csproj --configuration Release --output ./publish/web --runtime linux-x64 --self-contained false /p:Version=${{ steps.gitversion.outputs.semVer }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }}



    - name: Create MySQL Lambda Layer
      run: |
        # Create layer directory structure
        mkdir -p python/lib/python3.9/site-packages

        # Install PyMySQL (pure Python MySQL driver)
        pip install PyMySQL -t python/lib/python3.9/site-packages/

        # Create layer ZIP file
        zip -r mysql-layer.zip python/

        echo "MySQL layer created successfully"

    - name: Upload MySQL Layer
      uses: actions/upload-artifact@v4
      with:
        name: mysql-layer-package
        path: mysql-layer.zip



  deploy-global-infrastructure:
    name: Deploy Global Infrastructure
    runs-on: ubuntu-latest
    needs: [build, get-branch-name]
    outputs:
      github-actions-user-arn: ${{ steps.get-github-user.outputs.github-actions-user-arn }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set GitHub Actions User ARN
      id: get-github-user
      run: |
        echo "Using hardcoded GitHub Actions User ARN"
        echo "github-actions-user-arn=arn:aws:iam::991795635857:user/taskmanager-github-actions" >> $GITHUB_OUTPUT

    - name: Get AWS Account ID
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS Account ID: $ACCOUNT_ID"
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build, get-branch-name, deploy-global-infrastructure]
    concurrency:
      group: deploy-infrastructure-${{ matrix.region }}-${{ needs.get-branch-name.outputs.branch-name }}
      cancel-in-progress: false
    strategy:
      matrix:
        region: [us-east-1, us-west-2]
        include:
          - region: us-east-1
            is_primary: "true"
          - region: us-west-2
            is_primary: "false"
      max-parallel: 1
    outputs:
      aurora-kms-key-arn: ${{ steps.deploy-master.outputs.AuroraKmsKeyArn }}
      aurora-global-cluster-id: ${{ steps.deploy-master.outputs.AuroraGlobalClusterId }}
      api-gateway-cloudwatch-logs-role-arn: ${{ steps.deploy-master.outputs.ApiGatewayCloudWatchLogsRoleArn }}
      shared-lambda-role-arn: ${{ steps.deploy-master.outputs.SharedLambdaRoleArn }}
      database-endpoint: ${{ steps.deploy-master.outputs.DatabaseEndpoint }}
      database-reader-endpoint: ${{ steps.deploy-master.outputs.DatabaseReaderEndpoint }}
      database-username: ${{ steps.deploy-master.outputs.DatabaseUsername }}
      database-engine: ${{ steps.deploy-master.outputs.DatabaseEngine }}
      database-host: ${{ steps.deploy-master.outputs.DatabaseHost }}
      database-port: ${{ steps.deploy-master.outputs.DatabasePort }}
      database-name: ${{ steps.deploy-master.outputs.DatabaseName }}
      database-cluster-arn: ${{ steps.deploy-master.outputs.DatabaseClusterArn }}
      database-password-secret-arn: ${{ steps.deploy-master.outputs.DatabasePasswordSecretArn }}
      ecs-cluster-name: ${{ steps.deploy-master.outputs.ECSClusterName }}
      google-oauth-secret-arn: ${{ steps.deploy-master.outputs.GoogleOAuthSecretArn }}
      vpc-id: ${{ steps.deploy-master.outputs.VpcId }}
      private-subnet-1-id: ${{ steps.deploy-master.outputs.PrivateSubnet1Id }}
      private-subnet-2-id: ${{ steps.deploy-master.outputs.PrivateSubnet2Id }}
      public-subnet-1-id: ${{ steps.deploy-master.outputs.PublicSubnet1Id }}
      public-subnet-2-id: ${{ steps.deploy-master.outputs.PublicSubnet2Id }}
      lambda-security-group-id: ${{ steps.deploy-master.outputs.LambdaSecurityGroupId }}
      alb-security-group-id: ${{ steps.deploy-master.outputs.ALBSecurityGroupId }}
      ecs-task-security-group-id: ${{ steps.deploy-master.outputs.ECSTaskSecurityGroupId }}
      api-endpoint: ${{ steps.deploy-master.outputs.ApiEndpoint }}
      web-endpoint: ${{ steps.deploy-master.outputs.WebEndpoint }}
      web-load-balancer-dns: ${{ steps.deploy-master.outputs.WebLoadBalancerDNS }}
      web-load-balancer-hosted-zone-id: ${{ steps.deploy-master.outputs.WebLoadBalancerHostedZoneId }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install SAM CLI
      run: |
        pip install aws-sam-cli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: Get AWS Account ID
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS Account ID: $ACCOUNT_ID"
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT


    - name: Build and package master template
      run: |
        BUCKET_NAME="cf-templates-${{ steps.account-id.outputs.account-id }}-${{ matrix.region }}"
        BRANCH_NAME="${{ needs.get-branch-name.outputs.branch-name }}"
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

        echo "Building and packaging master template to S3 bucket: $BUCKET_NAME"
        sam build --template infrastructure/master-template.yaml --region ${{ matrix.region }}
        sam package --template-file .aws-sam/build/template.yaml --s3-bucket $BUCKET_NAME --s3-prefix $BRANCH_NAME --output-template-file packaged-master-template.yaml --region ${{ matrix.region }}

        # Upload the packaged template as master-template.yaml for compatibility
        aws s3 cp packaged-master-template.yaml s3://$BUCKET_NAME/$BRANCH_NAME/master-template.yaml --region ${{ matrix.region }}
    - name: Build and Push Web Container Image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ matrix.region }}
      run: |
        # Use GitVersion for unique image tagging
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}
        IMAGE_TAG=${{ needs.build.outputs.semVer }}
        BRANCH_TAG=${BRANCH_NAME:-main}

        # Construct ECR repository URI
        ACCOUNT_ID=${{ steps.account-id.outputs.account-id }}
        ECR_REPO="${ACCOUNT_ID}.dkr.ecr.${{ matrix.region }}.amazonaws.com/ecr-${ACCOUNT_ID}-${{ matrix.region }}"

        echo "üéØ ECR repository: $ECR_REPO"
        echo "üè∑Ô∏è Version tag: $IMAGE_TAG"
        echo "üåø Branch tag: $BRANCH_TAG"

        # Build container image from root context
        docker build -t taskmanager-web:$IMAGE_TAG -f src/TaskManager.Web2/Dockerfile . --build-arg VERSION=${{ needs.build.outputs.semVer }} --build-arg ASSEMBLY_VERSION=${{ needs.build.outputs.assemblySemVer }}

        # Login to ECR
        aws ecr get-login-password --region ${{ matrix.region }} | docker login --username AWS --password-stdin $ECR_REPO

        # Tag and push versioned image
        docker tag taskmanager-web:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG
        docker push $ECR_REPO:$IMAGE_TAG
        echo "‚úÖ Pushed versioned image: $ECR_REPO:$IMAGE_TAG"

        # Tag and push branch-specific image (for easy reference)
        docker tag taskmanager-web:$IMAGE_TAG $ECR_REPO:$BRANCH_TAG
        docker push $ECR_REPO:$BRANCH_TAG
        echo "‚úÖ Pushed branch image: $ECR_REPO:$BRANCH_TAG"

        # Also tag as latest for main branch
        if [ "$BRANCH_NAME" = "main" ]; then
          docker tag taskmanager-web:$IMAGE_TAG $ECR_REPO:latest
          docker push $ECR_REPO:latest
          echo "‚úÖ Pushed latest image: $ECR_REPO:latest"
        fi

        CONTAINER_IMAGE=$ECR_REPO:$IMAGE_TAG
        echo "CONTAINER_IMAGE=$CONTAINER_IMAGE" >> $GITHUB_ENV


    - name: Get primary region outputs for secondary
      id: get-primary-outputs
      if: matrix.is_primary == 'false'
      run: |
        echo "Getting outputs from primary region stack..."
        PRIMARY_STACK_NAME="taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-us-east-1"
        KMS_KEY_ARN=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`AuroraKmsKeyArn`].OutputValue' --output text)
        GLOBAL_CLUSTER_ID=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`AuroraGlobalClusterId`].OutputValue' --output text)
        API_GATEWAY_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayCloudWatchLogsRoleArn`].OutputValue' --output text)
        SHARED_LAMBDA_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name $PRIMARY_STACK_NAME --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`SharedLambdaRoleArn`].OutputValue' --output text)
        echo "kms-key-arn=$KMS_KEY_ARN" >> $GITHUB_OUTPUT
        echo "global-cluster-id=$GLOBAL_CLUSTER_ID" >> $GITHUB_OUTPUT
        echo "api-gateway-role-arn=$API_GATEWAY_ROLE_ARN" >> $GITHUB_OUTPUT
        echo "shared-lambda-role-arn=$SHARED_LAMBDA_ROLE_ARN" >> $GITHUB_OUTPUT

    - name: Deploy master template
      id: deploy-master
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-${{ matrix.region }}
        template: packaged-master-template.yaml
        parameter-overrides: TemplateBucket=${{ env.BUCKET_NAME }},GitHubActionsUserArn=arn:aws:iam::991795635857:user/taskmanager-github-actions,BranchName=${{ needs.get-branch-name.outputs.branch-name }},DatabasePassword=${{ secrets.DATABASE_PASSWORD }},EngineVersion=${{ env.ENGINE_VERSION }},IsPrimaryRegion=${{ matrix.is_primary }},AuroraGlobalClusterId=${{ steps.get-primary-outputs.outputs.global-cluster-id }},ApiGatewayCloudWatchLogsRoleArn=${{ steps.get-primary-outputs.outputs.api-gateway-role-arn }},SharedLambdaRoleArn=${{ steps.get-primary-outputs.outputs.shared-lambda-role-arn }},KmsKeyArn=${{ steps.get-primary-outputs.outputs.kms-key-arn }},GoogleOAuthClientId=${{ secrets.GOOGLE_CLIENT_ID }},GoogleOAuthClientSecret=${{ secrets.GOOGLE_CLIENT_SECRET }},WebContainerImage=${{ env.CONTAINER_IMAGE }},DeploymentToken=${{ github.sha }},DomainName=appcloud.systems,HostedZoneId=Z06422172SASV44F5Y8VA
        capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 30

  deploy-global-dns:
    name: Deploy Global DNS Failover
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, get-branch-name]
    if: needs.deploy-infrastructure.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Get AWS Account ID
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Upload Global DNS template to S3
      run: |
        BUCKET_NAME="cf-templates-${{ steps.account-id.outputs.account-id }}-${{ env.AWS_REGION_PRIMARY }}"
        BRANCH_NAME="${{ needs.get-branch-name.outputs.branch-name }}"
        echo "Uploading global DNS template to S3 bucket: $BUCKET_NAME"
        aws s3 cp infrastructure/global-dns-template.yaml s3://$BUCKET_NAME/$BRANCH_NAME/ --region ${{ env.AWS_REGION_PRIMARY }}

    - name: Get Load Balancer Details
      id: get-lb-details
      run: |
        BRANCH_NAME=${{ needs.get-branch-name.outputs.branch-name }}

        # Get primary load balancer details
        PRIMARY_DNS=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-${{ env.AWS_REGION_PRIMARY }} \
          --region ${{ env.AWS_REGION_PRIMARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerDNS`].OutputValue' \
          --output text)

        PRIMARY_HZ=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-${{ env.AWS_REGION_PRIMARY }} \
          --region ${{ env.AWS_REGION_PRIMARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerHostedZoneId`].OutputValue' \
          --output text)

        # Get secondary load balancer details
        SECONDARY_DNS=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-${{ env.AWS_REGION_SECONDARY }} \
          --region ${{ env.AWS_REGION_SECONDARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerDNS`].OutputValue' \
          --output text)

        SECONDARY_HZ=$(aws cloudformation describe-stacks \
          --stack-name taskmanager-${BRANCH_NAME}-${{ env.AWS_REGION_SECONDARY }} \
          --region ${{ env.AWS_REGION_SECONDARY }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebLoadBalancerHostedZoneId`].OutputValue' \
          --output text)

        echo "Primary DNS: $PRIMARY_DNS"
        echo "Primary HZ: $PRIMARY_HZ"
        echo "Secondary DNS: $SECONDARY_DNS"
        echo "Secondary HZ: $SECONDARY_HZ"

        echo "primary-web-load-balancer-dns=$PRIMARY_DNS" >> $GITHUB_OUTPUT
        echo "primary-web-load-balancer-hosted-zone-id=$PRIMARY_HZ" >> $GITHUB_OUTPUT
        echo "secondary-web-load-balancer-dns=$SECONDARY_DNS" >> $GITHUB_OUTPUT
        echo "secondary-web-load-balancer-hosted-zone-id=$SECONDARY_HZ" >> $GITHUB_OUTPUT

    - name: deploy (global-dns-template)
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: taskmanager-${{ needs.get-branch-name.outputs.branch-name }}-global-dns
        template: infrastructure/global-dns-template.yaml
        parameter-overrides: Environment=${{ needs.get-branch-name.outputs.branch-name }},DomainName=appcloud.systems,HostedZoneId=Z06422172SASV44F5Y8VA,PrimaryRegion=${{ env.AWS_REGION_PRIMARY }},SecondaryRegion=${{ env.AWS_REGION_SECONDARY }},PrimaryWebLoadBalancerDNS=${{ steps.get-lb-details.outputs.primary-web-load-balancer-dns }},PrimaryWebLoadBalancerHostedZoneId=${{ steps.get-lb-details.outputs.primary-web-load-balancer-hosted-zone-id }},SecondaryWebLoadBalancerDNS=${{ steps.get-lb-details.outputs.secondary-web-load-balancer-dns }},SecondaryWebLoadBalancerHostedZoneId=${{ steps.get-lb-details.outputs.secondary-web-load-balancer-hosted-zone-id }}
        no-fail-on-empty-changeset: "1"
        timeout-in-minutes: 10

