AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "TaskManager API - Lambda Function with Branch-Specific Database"

Parameters:
  Environment:
    Type: String
    Default: main
    Description: "Environment name (typically branch name)"

  ApiCodeBucket:
    Type: String
    Description: "S3 bucket name for API Lambda deployment package"

  ApiCodeKey:
    Type: String
    Description: "S3 key for API Lambda deployment package"
    Default: "api-lambda-deployment.zip"

  SharedLambdaRoleArn:
    Type: String
    Description: "ARN of the shared Lambda execution role"

  DatabaseEndpoint:
    Type: String
    Description: "Database endpoint address"

  LambdaSecurityGroupId:
    Type: String
    Description: "Security group ID for Lambda functions"

  PrivateSubnet1Id:
    Type: String
    Description: "Private subnet 1 ID"

  PrivateSubnet2Id:
    Type: String
    Description: "Private subnet 2 ID"

Globals:
  Function:
    Runtime: dotnet8
    Timeout: 60
    MemorySize: 512
    Environment:
      Variables:
        ASPNETCORE_ENVIRONMENT: !Ref Environment

Resources:
  # CloudWatch Log Group for Database Setup
  DatabaseSetupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/TaskManager-DbSetup-${Environment}"
      RetentionInDays: 7
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # CloudWatch Log Group for API
  ApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/TaskManagerApi-${Environment}"
      RetentionInDays: 7
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Lambda Layer for MySQL dependencies
  MySQLLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "taskmanager-mysql-layer-${Environment}"
      Description: "MySQL dependencies for Lambda"
      Content:
        S3Bucket: !Ref ApiCodeBucket
        S3Key: "mysql-layer.zip"
      CompatibleRuntimes:
        - python3.9

  # Branch-specific database creation Lambda
  DatabaseSetupFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DatabaseSetupLogGroup
      - MySQLLayer
    Properties:
      FunctionName: !Sub "TaskManager-DbSetup-${Environment}"
      Timeout: 120
      Layers:
        - !Ref MySQLLayer
      InlineCode: |
        import json
        import boto3
        import os
        import logging
        import pymysql

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        def lambda_handler(event, context):
            try:
                # Simple token-based authentication for CI/CD access
                auth_token = event.get('headers', {}).get('Authorization') or \
                            event.get('queryStringParameters', {}).get('token', '')
                expected_token = os.environ.get('SETUP_AUTH_TOKEN', 'taskmanager-setup-token')

                if auth_token != expected_token:
                    logger.warning("Unauthorized access attempt to setup-database endpoint")
                    return {
                        'statusCode': 401,
                        'body': json.dumps({'error': 'Unauthorized'})
                    }

                # Validate required environment variables
                required_vars = ['BRANCH_NAME', 'DB_HOST', 'DB_USER', 'DB_PASSWORD']
                missing_vars = [var for var in required_vars \
                               if var not in os.environ or not os.environ[var]]

                if missing_vars:
                    error_msg = f"Missing required environment variables: {', '.join(missing_vars)}"
                    logger.error(error_msg)
                    return {
                        'statusCode': 500,
                        'body': json.dumps({'error': error_msg})
                    }

                # Create branch-specific database name
                branch_name = os.environ['BRANCH_NAME']
                db_name = f"taskmanager_{branch_name}"

                # Validate database name (MySQL naming rules)
                if not db_name.replace('_', '').replace('-', '').isalnum() or len(db_name) > 64:
                    error_msg = f"Invalid database name: {db_name} (must be alphanumeric, underscore, or hyphen, max 64 chars)"
                    logger.error(error_msg)
                    return {
                        'statusCode': 400,
                        'body': json.dumps({'error': error_msg})
                    }

                logger.info(f"Attempting to setup database: {db_name}")

                # Connect to MySQL using PyMySQL
                try:
                    conn = pymysql.connect(
                        host=os.environ['DB_HOST'],
                        user=os.environ['DB_USER'],
                        password=os.environ['DB_PASSWORD'],
                        database='taskmanager',
                        port=3306,
                        ssl={'ssl': {}}
                    )
                    logger.info("Successfully connected to MySQL")

                    # MySQL autocommit is enabled by default
                    cursor = conn.cursor()

                    # Check if database exists
                    cursor.execute("SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = %s", [db_name])
                    exists = cursor.fetchone()

                    if not exists:
                        # Create database
                        cursor.execute(f"CREATE DATABASE `{db_name}`")
                        logger.info(f"Created database: {db_name}")
                        message = f"Database {db_name} created successfully"
                    else:
                        logger.info(f"Database already exists: {db_name}")
                        message = f"Database {db_name} already exists"

                    cursor.close()
                    conn.close()

                    return {
                        'statusCode': 200,
                        'body': json.dumps({'message': message, 'database': db_name})
                    }

                except Exception as e:
                    error_msg = f"Database operation failed: {str(e)}"
                    logger.error(error_msg)
                    return {
                        'statusCode': 500,
                        'body': json.dumps({'error': error_msg})
                    }

            except Exception as e:
                error_msg = f"Unexpected error: {str(e)}"
                logger.error(error_msg)
                return {
                    'statusCode': 500,
                    'body': json.dumps({'error': error_msg})
                }

      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !Ref SharedLambdaRoleArn
      Environment:
        Variables:
          BRANCH_NAME: !Ref Environment
          DB_HOST: !Ref DatabaseEndpoint
          DB_USER: taskmanager_admin
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:taskmanager/database/${Environment}/regional/${AWS::Region}:SecretString:password}}"
          SETUP_AUTH_TOKEN: "taskmanager-setup-secure-token-2024"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnet1Id
          - !Ref PrivateSubnet2Id
      Events:
        CreateDatabase:
          Type: Api
          Properties:
            Path: /setup-database
            Method: POST
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"
  # TaskManager API Function
  TaskManagerApiFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DatabaseSetupFunction
      - ApiLambdaLogGroup
    Properties:
      FunctionName: !Sub "TaskManagerApi-${Environment}"
      CodeUri:
        Bucket: !Ref ApiCodeBucket
        Key: !Ref ApiCodeKey
      Handler: >-
        TaskManager.Api::TaskManager.Api.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      PackageType: Zip
      Role: !Ref SharedLambdaRoleArn
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT: !Ref Environment
          ConnectionStrings__DefaultConnection: !Sub
            - "Server=${DatabaseEndpoint};Database=taskmanager_${DatabaseName};User Id=taskmanager_admin;Password=${DatabasePassword};SslMode=Required;"
            - DatabaseEndpoint: !Ref DatabaseEndpoint
              DatabaseName: !Sub "${Environment}"
              DatabasePassword: !Sub "{{resolve:secretsmanager:taskmanager/database/${Environment}/regional/${AWS::Region}:SecretString:password}}"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnet1Id
          - !Ref PrivateSubnet2Id
      Events:
        # Health check endpoint for deployment verification
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
        # Main API routes for application functionality
        ApiGatewayProxy:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: ANY
      Tags:
        Environment: !Ref Environment
        Stack: !Ref "AWS::StackName"

  # CloudWatch Alarms for API
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "TaskManager-API-Errors-${Environment}"
      AlarmDescription: "API Lambda function error rate alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TaskManagerApiFunction

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub
      - "https://${ApiId}.execute-api.${Region}.amazonaws.com/Prod/"
      - ApiId: !Ref ServerlessRestApi
        Region: !Ref AWS::Region

  ApiLambdaFunctionName:
    Description: "API Lambda function name"
    Value: !Ref TaskManagerApiFunction

  DatabaseName:
    Description: "Branch-specific database name"
    Value: !Sub "taskmanager_${Environment}"

  BranchEnvironment:
    Description: "Branch environment name"
    Value: !Ref Environment
