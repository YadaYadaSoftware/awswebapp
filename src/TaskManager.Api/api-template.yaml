AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "TaskManager API - Lambda Function with Branch-Specific Database"

Parameters:
  Environment:
    Type: String
    Default: main
    Description: "Environment name (typically branch name)"

  ApiCodeBucket:
    Type: String
    Description: "S3 bucket name for API Lambda deployment package"

  ApiCodeKey:
    Type: String
    Description: "S3 key for API Lambda deployment package"
    Default: "api-lambda-deployment.zip"

  SharedLambdaRoleArn:
    Type: String
    Description: "ARN of the shared Lambda execution role"

  DatabaseEndpoint:
    Type: String
    Description: "Database endpoint address"

  LambdaSecurityGroupId:
    Type: String
    Description: "Security group ID for Lambda functions"

  PrivateSubnet1Id:
    Type: String
    Description: "Private subnet 1 ID"

  PrivateSubnet2Id:
    Type: String
    Description: "Private subnet 2 ID"

Globals:
  Function:
    Runtime: dotnet8
    Timeout: 60
    MemorySize: 512
    Environment:
      Variables:
        ASPNETCORE_ENVIRONMENT: !Ref Environment

Resources:
  # CloudWatch Log Group for Database Setup
  DatabaseSetupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/TaskManager-DbSetup-${Environment}"
      RetentionInDays: 7
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # CloudWatch Log Group for API
  ApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/TaskManagerApi-${Environment}"
      RetentionInDays: 7
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Lambda Layer for MySQL dependencies
  MySQLLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "taskmanager-mysql-layer-${Environment}"
      Description: "MySQL dependencies for Lambda"
      Content:
        S3Bucket: !Ref ApiCodeBucket
        S3Key: "mysql-layer.zip"
      CompatibleRuntimes:
        - python3.9

  # Branch-specific database creation Lambda
  DatabaseSetupFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DatabaseSetupLogGroup
      - MySQLLayer
    Properties:
      FunctionName: !Sub "TaskManager-DbSetup-${Environment}"
      Timeout: 120
      Layers:
        - !Ref MySQLLayer
      InlineCode: |
        import json
        import boto3
        import os
        import logging
        import pymysql
        from urllib.request import urlopen, Request

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        def send_response(event, context, response_status, response_data, physical_resource_id):
            response_body = {
                'Status': response_status,
                'Reason': response_data.get('Reason', 'See CloudWatch Logs'),
                'PhysicalResourceId': physical_resource_id,
                'StackId': event['StackId'],
                'RequestId': event['RequestId'],
                'LogicalResourceId': event['LogicalResourceId'],
                'Data': response_data
            }
            json_response_body = json.dumps(response_body)
            headers = {
                'content-type': '',
                'content-length': str(len(json_response_body))
            }
            try:
                req = Request(event['ResponseURL'], data=json_response_body.encode('utf-8'), headers=headers, method='PUT')
                with urlopen(req) as response:
                    logger.info(f"Response sent: {response.status}")
            except Exception as e:
                logger.error(f"Failed to send response: {e}")

        def lambda_handler(event, context):
            request_type = event['RequestType']
            branch_name = os.environ['BRANCH_NAME']
            db_name = f"taskmanager_{branch_name}"
            physical_resource_id = db_name
            try:
                conn = pymysql.connect(
                    host=os.environ['DB_HOST'],
                    user=os.environ['DB_USER'],
                    password=os.environ['DB_PASSWORD'],
                    database='taskmanager',
                    port=3306,
                    ssl={'ssl': {}}
                )
                cursor = conn.cursor()
                if request_type == 'Create':
                    cursor.execute("SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = %s", [db_name])
                    exists = cursor.fetchone()
                    if not exists:
                        cursor.execute(f"CREATE DATABASE `{db_name}`")
                        logger.info(f"Created database: {db_name}")
                elif request_type == 'Delete':
                    cursor.execute(f"DROP DATABASE IF EXISTS `{db_name}`")
                    logger.info(f"Dropped database: {db_name}")
                cursor.close()
                conn.close()
                send_response(event, context, 'SUCCESS', {}, physical_resource_id)
            except Exception as e:
                logger.error(f"Error: {e}")
                send_response(event, context, 'FAILED', {'Reason': str(e)}, physical_resource_id)

      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !Ref SharedLambdaRoleArn
      Environment:
        Variables:
          BRANCH_NAME: !Ref Environment
          DB_HOST: !Ref DatabaseEndpoint
          DB_USER: taskmanager_admin
          DB_PASSWORD: !Sub "{{resolve:secretsmanager:taskmanager/database/${Environment}/regional/${AWS::Region}:SecretString:password}}"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnet1Id
          - !Ref PrivateSubnet2Id
      Tags:
        Stack: !Ref "AWS::StackName"

  # Custom resource to trigger database setup
  DatabaseSetupCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt DatabaseSetupFunction.Arn

  # TaskManager API Function
  TaskManagerApiFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DatabaseSetupFunction
      - ApiLambdaLogGroup
    Properties:
      FunctionName: !Sub "TaskManagerApi-${Environment}"
      CodeUri:
        Bucket: !Ref ApiCodeBucket
        Key: !Ref ApiCodeKey
      Handler: >-
        TaskManager.Api::TaskManager.Api.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      PackageType: Zip
      Role: !Ref SharedLambdaRoleArn
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT: !Ref Environment
          ConnectionStrings__DefaultConnection: !Sub
            - "Server=${DatabaseEndpoint};Database=taskmanager_${DatabaseName};User Id=taskmanager_admin;Password=${DatabasePassword};SslMode=Required;"
            - DatabaseEndpoint: !Ref DatabaseEndpoint
              DatabaseName: !Sub "${Environment}"
              DatabasePassword: !Sub "{{resolve:secretsmanager:taskmanager/database/${Environment}/regional/${AWS::Region}:SecretString:password}}"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnet1Id
          - !Ref PrivateSubnet2Id
      Events:
        # Health check endpoint for deployment verification
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
        # Main API routes for application functionality
        ApiGatewayProxy:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: ANY
      Tags:
        Environment: !Ref Environment
        Stack: !Ref "AWS::StackName"

  # CloudWatch Alarms for API
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "TaskManager-API-Errors-${Environment}"
      AlarmDescription: "API Lambda function error rate alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TaskManagerApiFunction

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub
      - "https://${ApiId}.execute-api.${Region}.amazonaws.com/Prod/"
      - ApiId: !Ref ServerlessRestApi
        Region: !Ref AWS::Region

  ApiLambdaFunctionName:
    Description: "API Lambda function name"
    Value: !Ref TaskManagerApiFunction

  DatabaseName:
    Description: "Branch-specific database name"
    Value: !Sub "taskmanager_${Environment}"

  BranchEnvironment:
    Description: "Branch environment name"
    Value: !Ref Environment
