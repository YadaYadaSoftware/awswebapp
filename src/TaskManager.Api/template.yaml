AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'TaskManager Complete Application - Infrastructure and Lambda Functions'

Parameters:
  Environment:
    Type: String
    Default: main
    Description: 'Environment name for resource naming (typically branch name)'
  
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: 'Password for the RDS PostgreSQL database'
    
  GoogleClientId:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client ID'
    
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client Secret'

Globals:
  Function:
    Runtime: dotnet8
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        ASPNETCORE_ENVIRONMENT: !Ref Environment
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'https://localhost:7162'"
      AllowCredentials: false

Resources:
  # VPC and Networking
  TaskManagerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-VPC-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-IGW-${Environment}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TaskManagerVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets for NAT Gateways
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskManagerVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Public-Subnet-1-${Environment}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskManagerVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Public-Subnet-2-${Environment}'

  # Private Subnets for Lambda and RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskManagerVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Private-Subnet-1-${Environment}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskManagerVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Private-Subnet-2-${Environment}'

  # NAT Gateways for private subnet internet access
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TaskManagerVPC
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Public-RT-${Environment}'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TaskManagerVPC
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Private-RT-${Environment}'

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref TaskManagerVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-RDS-SG-${Environment}'

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref TaskManagerVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Lambda-SG-${Environment}'

  # RDS Database
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for TaskManager RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-DB-SubnetGroup-${Environment}'

  TaskManagerDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'taskmanager-db-${Environment}'
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: '15.7'
      MasterUsername: taskmanager_admin
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      MaxAllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 0
      StorageEncrypted: false
      DeletionProtection: false
      PubliclyAccessible: false
      MultiAZ: false
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Database-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Secrets Manager for database credentials (created after database)
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn: TaskManagerDatabase
    Properties:
      Name: !Sub 'taskmanager/database/${Environment}'
      Description: Database credentials for TaskManager
      SecretString: !Sub |
        {
          "username": "taskmanager_admin",
          "password": "${DatabasePassword}",
          "engine": "postgres",
          "host": "${TaskManagerDatabase.Endpoint.Address}",
          "port": 5432,
          "dbname": "taskmanager"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'TaskManager-Lambda-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecret
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  # RDS Proxy Role
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'TaskManager-RDSProxy-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref DatabaseSecret

  # RDS Proxy
  TaskManagerRDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: !Sub 'taskmanager-proxy-${Environment}'
      EngineFamily: POSTGRESQL
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !Ref DatabaseSecret
      RoleArn: !GetAtt RDSProxyRole.Arn
      VpcSubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      RequireTLS: false
      IdleClientTimeout: 1800
      MaxConnectionsPercent: 100
      MaxIdleConnectionsPercent: 50
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # RDS Proxy Target Group
  RDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref TaskManagerRDSProxy
      TargetGroupName: default
      DBInstanceIdentifiers:
        - !Ref TaskManagerDatabase

  # Bastion Host Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref TaskManagerVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access from anywhere (restrict to your IP for security)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Bastion-SG-${Environment}'

  # Bastion Host
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 (update for your region)
      InstanceType: t3.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      IamInstanceProfile: !Ref BastionInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y postgresql15
          
          # Create connection script
          cat > /home/ec2-user/connect-to-db.sh << 'EOF'
          #!/bin/bash
          echo "TaskManager Database Connection Helper"
          echo "RDS Proxy Endpoint: ${TaskManagerRDSProxy.Endpoint}"
          echo "Database: taskmanager"
          echo "Username: taskmanager_admin"
          echo ""
          echo "To connect:"
          echo "psql -h ${TaskManagerRDSProxy.Endpoint} -U taskmanager_admin -d taskmanager"
          EOF
          
          chmod +x /home/ec2-user/connect-to-db.sh
          chown ec2-user:ec2-user /home/ec2-user/connect-to-db.sh
      Tags:
        - Key: Name
          Value: !Sub 'TaskManager-Bastion-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Bastion Host IAM Role
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'TaskManager-Bastion-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SecretsManagerRead
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecret

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionRole

  # Lambda Function (SAM)
  TaskManagerApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'TaskManagerApi-${Environment}'
      CodeUri: ./
      Handler: TaskManager.Api::TaskManager.Api.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT: !Ref Environment
          ConnectionStrings__DefaultConnection: !Sub 'Host=${TaskManagerDatabase.Endpoint.Address};Database=taskmanager;Username=taskmanager_admin;Password=${DatabasePassword}'
          Authentication__Google__ClientId: !Ref GoogleClientId
          Authentication__Google__ClientSecret: !Ref GoogleClientSecret
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        ApiGatewayProxy:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        ApiGatewayRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
      Tags:
        Environment: !Ref Environment

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/TaskManagerApi-${Environment}'
      RetentionInDays: 30

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'TaskManager-Lambda-Errors-${Environment}'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TaskManagerApiFunction

  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'TaskManager-Database-CPU-${Environment}'
      AlarmDescription: 'Database CPU utilization alarm'
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref TaskManagerDatabase

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  DatabaseEndpoint:
    Description: 'RDS PostgreSQL endpoint (private)'
    Value: !GetAtt TaskManagerDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  RDSProxyEndpoint:
    Description: 'RDS Proxy endpoint (private)'
    Value: !GetAtt TaskManagerRDSProxy.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-RDSProxyEndpoint'

  DatabaseSecretArn:
    Description: 'Database secret ARN'
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecret'

  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref TaskManagerApiFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  VPCId:
    Description: 'VPC ID'
    Value: !Ref TaskManagerVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  BastionHostIP:
    Description: 'Bastion host public IP address'
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-BastionIP'

  BastionHostId:
    Description: 'Bastion host instance ID'
    Value: !Ref BastionHost
    Export:
      Name: !Sub '${AWS::StackName}-BastionHostId'

  PublicSubnet1Id:
    Description: 'Public subnet ID for bastion host'
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1'

  PrivateSubnets:
    Description: 'Private subnet IDs'
    Value: !Sub '${PrivateSubnet1},${PrivateSubnet2}'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  SSHCommand:
    Description: 'SSH command to connect to bastion host'
    Value: !Sub 'ssh -i your-key.pem ec2-user@${BastionHost.PublicIp}'

  DatabaseTunnelCommand:
    Description: 'SSH tunnel command for database access'
    Value: !Sub 'ssh -i your-key.pem -L 5432:${TaskManagerRDSProxy.Endpoint}:5432 ec2-user@${BastionHost.PublicIp}'