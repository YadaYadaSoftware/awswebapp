AWSTemplateFormatVersion: '2010-09-09'
Description: 'TaskManager Web Frontend - Blazor Server ECS Container with Application Load Balancer'
# Fixed ECS service getting stuck and 502 Bad Gateway by:
# - Health check path: /health (excluded from authentication)
# - Adjusted health check timing (30s interval, 5s timeout)
# - Increased CPU to 512 and Memory to 1024
# - Extended health check grace period to 300s (5 minutes)
# - Added container environment variables for proper startup
# - Added dependency on TaskDefinition for service creation
# - Set ASPNETCORE_ENVIRONMENT to Production
# - Configured ASPNETCORE_URLS for all interfaces (*:80)
# - Added Kestrel limits for better container performance
# - Excluded health, login, logout, error, and OAuth endpoints from authentication

Parameters:
  Environment:
    Type: String
    Default: main
    Description: 'Environment name (typically branch name)'

  GoogleClientId:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client ID'

  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client Secret'

  WebContainerImage:
    Type: String
    Description: 'Container image URI for the web application'

  DomainName:
    Type: String
    Default: 'example.com'
    Description: 'Domain name for SSL certificate (e.g., yourdomain.com)'

Resources:
  # CloudWatch Log Group for ECS
  WebECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/TaskManagerWeb-${Environment}'
      RetentionInDays: 7

  # Application Load Balancer
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'web-${Environment}'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue: 'TaskManager-ALBSecurityGroup'
      Subnets:
        - Fn::ImportValue: 'TaskManager-PublicSubnet1'
        - Fn::ImportValue: 'TaskManager-PublicSubnet2'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Target Group
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'webtg-${Environment}'
      Protocol: HTTP
      Port: 80
      VpcId:
        Fn::ImportValue: 'TaskManager-VPC'
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPort: 80

  # ALB HTTP Listener (redirects to HTTPS)
  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301

  # ALB HTTPS Listener (uncomment when you have SSL certificate)
  # WebHttpsListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref WebLoadBalancer
  #     Protocol: HTTPS
  #     Port: 443
  #     Certificates:
  #       - CertificateArn: !Ref WebSSLCertificate
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref WebTargetGroup

  # Note: For HTTPS without custom domain, you have these options:
  # 1. Use a custom domain with Route 53 + ACM certificate
  # 2. Import your own SSL certificate
  # 3. Use HTTP only (not recommended for production)

  # Uncomment and modify for custom domain approach:
  # WebSSLCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref DomainName
  #     ValidationMethod: DNS
  #     SubjectAlternativeNames:
  #       - !Sub '*.${DomainName}'

  # ECS Task Definition
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'webtd-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn:
        Fn::ImportValue: 'TaskManager-SharedLambdaRole'
      TaskRoleArn:
        Fn::ImportValue: 'TaskManager-SharedLambdaRole'
      ContainerDefinitions:
        - Name: web
          Image: !Ref WebContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: 'Production'
            - Name: ConnectionStrings__DefaultConnection
              Value: !Sub
                - 'Host=${DatabaseEndpoint};Database=taskmanager_${DatabaseName};Username=taskmanager_admin;Password=${DatabasePassword}'
                - DatabaseEndpoint:
                    Fn::ImportValue: 'TaskManager-DatabaseEndpoint'
                  DatabaseName: !Sub '${Environment}'
                  DatabasePassword: !Sub '{{resolve:secretsmanager:taskmanager/database/shared:SecretString:password}}'
            - Name: Authentication__Google__ClientId
              Value: !Ref GoogleClientId
            - Name: Authentication__Google__ClientSecret
              Value: !Ref GoogleClientSecret
            - Name: ASPNETCORE_URLS
              Value: 'http://*:80'
            - Name: DOTNET_RUNNING_IN_CONTAINER
              Value: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Service
  WebService:
    Type: AWS::ECS::Service
    DependsOn:
      - WebListener
      - WebTaskDefinition
    Properties:
      ServiceName: !Sub 'websvc-${Environment}'
      Cluster:
        Fn::ImportValue: 'TaskManager-ECSCluster'
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: 'TaskManager-ECSTaskSecurityGroup'
          Subnets:
            - Fn::ImportValue: 'TaskManager-PrivateSubnet1'
            - Fn::ImportValue: 'TaskManager-PrivateSubnet2'
      LoadBalancers:
        - TargetGroupArn: !Ref WebTargetGroup
          ContainerName: web
          ContainerPort: 80
      HealthCheckGracePeriodSeconds: 300
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms for Web
  WebECSServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'TaskManager-Web-Unhealthy-${Environment}'
      AlarmDescription: 'Web ECS service unhealthy targets alarm'
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt WebLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt WebTargetGroup.TargetGroupFullName

Outputs:
  WebEndpoint:
    Description: 'Web application endpoint URL'
    Value: !Sub 'http://${WebLoadBalancer.DNSName}'

  WebLoadBalancerDNS:
    Description: 'Web Load Balancer DNS name'
    Value: !GetAtt WebLoadBalancer.DNSName


  WebTaskDefinition:
    Description: 'Web ECS task definition'
    Value: !Ref WebTaskDefinition

  WebServiceName:
    Description: 'Web ECS service name'
    Value: !Ref WebService