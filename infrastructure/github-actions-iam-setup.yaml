AWSTemplateFormatVersion: "2010-09-09"
Description: "TaskManager GitHub Actions IAM User and Permissions Setup"

Parameters:
  UserName:
    Type: String
    Default: "taskmanager-github-actions"
    Description: "Name for the GitHub Actions IAM user"

  TemplatesBucketName:
    Type: String
    Description: "Name of the S3 bucket for CloudFormation templates (must already exist or be created separately)"

Conditions:
  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]

Resources:
  # IAM User for GitHub Actions
  GitHubActionsUser:
    Type: AWS::IAM::User
    Condition: IsUsEast1
    Properties:
      UserName: !Ref UserName
      Tags:
        - Key: LogicalId
          Value: GitHubActionsUser
        - Key: Purpose
          Value: "GitHub Actions Deployment"
        - Key: Application
          Value: "TaskManager"
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Custom IAM Policy with specific permissions
  TaskManagerDeploymentPolicy:
    Type: AWS::IAM::Policy
    Condition: IsUsEast1
    Properties:
      PolicyName: "TaskManagerDeploymentPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Core AWS service permissions
          - Effect: Allow
            Action:
              - cloudformation:*
              - lambda:*
              - apigateway:*
              - rds:*
              - ec2:*
              - secretsmanager:*
              - logs:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - ecs:*
              - ecr:*
              - elasticloadbalancing:*
              - acm:*
              - route53:*
              - iam:*
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: "*"

          # Service-linked role creation
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
            Resource: "*"
            Condition:
              StringEquals:
                iam:AWSServiceName:
                  - "elasticloadbalancing.amazonaws.com"
                  - "ecs.amazonaws.com"

          # KMS permissions for Aurora encryption
          - Effect: Allow
            Action:
              - kms:CreateKey
              - kms:DescribeKey
              - kms:CreateGrant
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:RetireGrant
              - kms:CreateAlias
              - kms:DeleteAlias
              - kms:UpdateAlias
              - kms:ListAliases
              - kms:ListGrants
              - kms:RevokeGrant
              - kms:PutKeyPolicy
              - kms:ReplicateKey
              - kms:ScheduleKeyDeletion
              - kms:GetKeyPolicy
            Resource: "*"

          # Tagging permissions for all resources
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DeleteTags
              - ec2:DescribeTags
              - rds:AddTagsToResource
              - rds:RemoveTagsFromResource
              - rds:DescribeDBInstances
              - rds:DescribeDBClusters
              - lambda:TagResource
              - lambda:UntagResource
              - lambda:ListTags
              - logs:TagLogGroup
              - logs:UntagLogGroup
              - logs:ListTagsLogGroup
              - ecr:TagResource
              - ecr:UntagResource
              - ecr:ListTagsForResource
              - ecs:TagResource
              - ecs:UntagResource
              - ecs:ListTagsForResource
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
              - elasticloadbalancing:DescribeTags
              - secretsmanager:TagResource
              - secretsmanager:UntagResource
              - secretsmanager:DescribeSecret
              - kms:TagResource
              - kms:UntagResource
              - kms:ListResourceTags
              - s3:PutBucketTagging
              - s3:GetBucketTagging
              - s3:DeleteBucketTagging
              - route53:ChangeTagsForResource
              - route53:ListTagsForResource
              - acm:AddTagsToCertificate
              - acm:RemoveTagsFromCertificate
              - acm:ListTagsForCertificate
              - cloudwatch:TagResource
              - cloudwatch:UntagResource
              - cloudwatch:ListTagsForResource
            Resource: "*"

          # STS permissions
          - Effect: Allow
            Action:
              - sts:GetCallerIdentity
              - sts:AssumeRole
            Resource: "*"
      Users:
        - !Ref GitHubActionsUser

  # Access Key for GitHub Actions
  GitHubActionsAccessKey:
    Type: AWS::IAM::AccessKey
    Condition: IsUsEast1
    Properties:
      UserName: !Ref GitHubActionsUser

  # S3 Bucket Policy for CloudFormation Access (bucket must exist)
  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsUsEast1
    Properties:
      Bucket: !Ref TemplatesBucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFormationAccess
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${TemplatesBucketName}/*"
          - Sid: AllowGitHubActionsFullAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt GitHubActionsUser.Arn
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${TemplatesBucketName}"
              - !Sub "arn:aws:s3:::${TemplatesBucketName}/*"

  # ECR Repository for Web Application
  WebECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "ecr-${AWS::AccountId}-${AWS::Region}"
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: "MUTABLE"
      Tags:
        - Key: LogicalId
          Value: WebECRRepository
        - Key: Name
          Value: "TaskManager-Web-ECR"
        - Key: Purpose
          Value: "Container Registry"
        - Key: Stack
          Value: !Ref "AWS::StackName"

Outputs:
  UserName:
    Description: "IAM User name for GitHub Actions"
    Value: !Ref GitHubActionsUser
    Condition: IsUsEast1

  AccessKeyId:
    Description: "Access Key ID for GitHub Actions (add to GitHub secrets)"
    Value: !Ref GitHubActionsAccessKey
    Condition: IsUsEast1

  SecretAccessKey:
    Description: "Secret Access Key for GitHub Actions (add to GitHub secrets)"
    Value: !GetAtt GitHubActionsAccessKey.SecretAccessKey
    Condition: IsUsEast1

  UserArn:
    Description: "IAM User ARN"
    Value: !GetAtt GitHubActionsUser.Arn
    Condition: IsUsEast1

  PolicyArn:
    Description: "Custom policy ARN"
    Value: !Ref TaskManagerDeploymentPolicy
    Condition: IsUsEast1

  TemplatesBucketName:
    Description: "S3 bucket name for CloudFormation templates"
    Value: !Ref TemplatesBucketName

  WebECRRepositoryName:
    Description: "ECR repository name for web application"
    Value: !Ref WebECRRepository

  SetupInstructions:
    Description: "Instructions for GitHub Secrets setup"
    Value: !Sub |
      Add these to your GitHub repository secrets:
      AWS_ACCESS_KEY_ID=${GitHubActionsAccessKey}
      AWS_SECRET_ACCESS_KEY=${GitHubActionsAccessKey.SecretAccessKey}

      Also add:
      DATABASE_PASSWORD=your-secure-password
      GOOGLE_CLIENT_ID=your-google-client-id
      GOOGLE_CLIENT_SECRET=your-google-client-secret

      IMPORTANT: Ensure the S3 bucket '${TemplatesBucketName}' exists and is configured with:
      - Versioning enabled
      - Server-side encryption (SSE-S3 or SSE-KMS)
      - Public access blocked
      - Appropriate bucket policies for CloudFormation and GitHub Actions access
    Condition: IsUsEast1
