---
AWSTemplateFormatVersion: 2010-09-09
Description: TaskManager Regional Database Infrastructure - Aurora Clusters, RDS Resources

Parameters:
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for the Aurora MySQL database

  EngineVersion:
    Type: String
    Description: Aurora MySQL engine version for the regional cluster

  AuroraGlobalClusterId:
    Type: String
    Description: ID of the Aurora global cluster from global stack

  AuroraKmsKeyArn:
    Type: String
    Description: ARN of the KMS key used by the Aurora global cluster

  IsPrimaryRegion:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
    Description: Whether this region hosts the primary cluster

  GitHubActionsUserArn:
    Type: String
    Description: ARN of the GitHub Actions IAM user from IAM setup stack

Conditions:
  IsPrimary: !Equals [!Ref IsPrimaryRegion, "true"]
  IsNotPrimary: !Equals [!Ref IsPrimaryRegion, "false"]

Resources:
  # Aurora DB Subnet Group for this region
  AuroraDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Aurora cluster in this region"
      SubnetIds:
        - !ImportValue
          Fn::Sub: TaskManager-PrivateSubnet1-${AWS::Region}
        - !ImportValue
          Fn::Sub: TaskManager-PrivateSubnet2-${AWS::Region}
      DBSubnetGroupName: !Sub "taskmanager-aurora-subnet-group-${AWS::Region}"
      Tags:
        - Key: Name
          Value: "TaskManager-Aurora-SubnetGroup"
        - Key: Region
          Value: !Ref AWS::Region
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Aurora DB Cluster Parameter Group
  AuroraClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Family: aurora-mysql8.0
      Description: "Parameter group for Aurora MySQL cluster"
      Parameters:
        character_set_server: utf8mb4
        collation_server: utf8mb4_unicode_ci
        innodb_buffer_pool_size: "{DBInstanceClassMemory*3/4}"
        max_connections: "200"
        slow_query_log: "1"
        long_query_time: "2"

  # Aurora Serverless v2 Cluster
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      GlobalClusterIdentifier: !Ref AuroraGlobalClusterId
      Engine: aurora-mysql
      EngineVersion: !Ref EngineVersion
      MasterUsername: !If [IsPrimary, "taskmanager_admin", !Ref "AWS::NoValue"]
      MasterUserPassword: !If [IsPrimary, !Ref DatabasePassword, !Ref "AWS::NoValue"]
      DatabaseName: !If [IsPrimary, "taskmanager", !Ref "AWS::NoValue"]
      DBSubnetGroupName: !Ref AuroraDBSubnetGroup
      DBClusterParameterGroupName: !Ref AuroraClusterParameterGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      StorageEncrypted: true
      KmsKeyId: !If [IsPrimary, !Ref AuroraKmsKeyArn, !GetAtt AuroraKmsKeyReplica.Arn]
      DeletionProtection: false
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 4
      EnableCloudwatchLogsExports:
        - audit
        - error
        - general
        - slowquery
      Tags:
        - Key: Name
          Value: !Sub "TaskManager-Aurora-Cluster-${AWS::Region}"
        - Key: Purpose
          Value: !Sub "${IsPrimaryRegion} Aurora Cluster"
        - Key: Region
          Value: !Ref AWS::Region
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Aurora Serverless v2 Instance
  AuroraInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "taskmanager-aurora-instance-${AWS::Region}"
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: db.serverless
      Engine: aurora-mysql
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub "TaskManager-Aurora-Instance-${AWS::Region}"
        - Key: Purpose
          Value: "Regional Aurora Instance"
        - Key: Region
          Value: !Ref AWS::Region
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Aurora MySQL Serverless
      VpcId: !ImportValue
        Fn::Sub: TaskManager-VPC-${AWS::Region}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: TaskManager-LambdaSecurityGroup-${AWS::Region}
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: TaskManager-BastionSecurityGroup-${AWS::Region}
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: TaskManager-ECSTaskSecurityGroup-${AWS::Region}
      Tags:
        - Key: Name
          Value: "TaskManager-Aurora-SG"
        - Key: Stack
          Value: !Ref "AWS::StackName"



  # KMS Key Replica (for multi-region support)
  AuroraKmsKeyReplica:
    Type: AWS::KMS::ReplicaKey
    Condition: IsNotPrimary
    Properties:
      PrimaryKeyArn: !Ref AuroraKmsKeyArn
      Description: Replica of multi-region Aurora KMS key
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: EnableIAMUserPermissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: "*"
          - Sid: AllowRDSService
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:RetireGrant
            Resource: "*"
          - Sid: AllowGitHubActionsUser
            Effect: Allow
            Principal:
              AWS: !Ref GitHubActionsUserArn
            Action:
              - kms:CreateKey
              - kms:DescribeKey
              - kms:CreateGrant
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:RetireGrant
              - kms:CreateAlias
              - kms:DeleteAlias
              - kms:UpdateAlias
              - kms:ListAliases
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: "*"
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

  # Database Secret
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "taskmanager/database/regional/${AWS::Region}"
      Description: Database credentials for Aurora Regional Cluster
      SecretString: !Sub |
        {
          "username": "taskmanager_admin",
          "password": "${DatabasePassword}",
          "engine": "aurora-mysql",
          "host": "${AuroraCluster.Endpoint.Address}",
          "port": "${AuroraCluster.Endpoint.Port}",
          "dbname": "taskmanager",
          "cluster_arn": "${AuroraCluster.DBClusterArn}",
          "secret_arn": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:taskmanager/database/regional/${AWS::Region}"
        }
      Tags:
        - Key: Stack
          Value: !Ref "AWS::StackName"

Outputs:
  AuroraClusterId:
    Description: Aurora Regional Cluster ID
    Value: !Ref AuroraCluster
    Export:
      Name: !Sub "TaskManager-AuroraCluster-${AWS::Region}"

  DatabaseEndpoint:
    Description: Aurora MySQL cluster endpoint
    Value: !GetAtt AuroraCluster.Endpoint.Address
    Export:
      Name: !Sub "TaskManager-DatabaseEndpoint-${AWS::Region}"

  DatabaseReaderEndpoint:
    Description: Aurora MySQL reader endpoint
    Value: !GetAtt AuroraCluster.ReadEndpoint.Address
    Export:
      Name: !Sub "TaskManager-DatabaseReaderEndpoint-${AWS::Region}"

  DatabaseSecretArn:
    Description: Database secret ARN
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub "TaskManager-DatabaseSecret-${AWS::Region}"

  RDSSecurityGroupId:
    Description: Security group for RDS access
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub "TaskManager-RDSSecurityGroup-${AWS::Region}"
