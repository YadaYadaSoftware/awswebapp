AWSTemplateFormatVersion: "2010-09-09"
Description: "TaskManager Web Frontend - Blazor Server ECS Container with Application Load Balancer"
# Fixed ECS service getting stuck and 502 Bad Gateway by:
# - Health check path: /health (excluded from authentication)
# - Adjusted health check timing (30s interval, 5s timeout)
# - Increased CPU to 512 and Memory to 1024
# - Extended health check grace period to 300s (5 minutes)
# - Added container environment variables for proper startup
# - Added dependency on TaskDefinition for service creation
# - Set ASPNETCORE_ENVIRONMENT to Production
# - Configured ASPNETCORE_URLS for all interfaces (*:80)
# - Added Kestrel limits for better container performance
# - Excluded health, login, logout, error, and OAuth endpoints from authentication

Mappings:
  RegionMap:
    us-east-1:
      ALBHostedZoneId: Z35SXDOTRQ7X7K
    us-east-2:
      ALBHostedZoneId: Z3AADJGX6KTTL2
    us-west-1:
      ALBHostedZoneId: Z368ELLRRE2KJ0
    us-west-2:
      ALBHostedZoneId: Z1H1FL5HABSF5
    eu-west-1:
      ALBHostedZoneId: Z2IFOLAFXWLO4F
    eu-central-1:
      ALBHostedZoneId: Z268VQBMOI5EKX
    ap-southeast-1:
      ALBHostedZoneId: Z1LMS91P8CMLE5
    ap-northeast-1:
      ALBHostedZoneId: Z31USIVHYNEOWT

Parameters:
  Environment:
    Type: String
    Default: main
    Description: "Environment name (typically branch name)"

  WebContainerImage:
    Type: String
    Description: "Container image URI for the web application"

  DeploymentToken:
    Type: String
    Description: "Deployment token to force task definition updates"
    Default: "default"

  DomainName:
    Type: String
    Description: "Domain name for SSL certificate"

  HostedZoneId:
    Type: String
    Description: "Route 53 hosted zone ID for the domain"

  SharedLambdaRoleArn:
    Type: String
    Description: "ARN of the shared Lambda execution role"

  VPCId:
    Type: String
    Description: "VPC ID"

  ALBSecurityGroupId:
    Type: String
    Description: "Security group ID for ALB"

  ECSTaskSecurityGroupId:
    Type: String
    Description: "Security group ID for ECS tasks"

  PublicSubnet1Id:
    Type: String
    Description: "Public subnet 1 ID"

  PublicSubnet2Id:
    Type: String
    Description: "Public subnet 2 ID"

  PrivateSubnet1Id:
    Type: String
    Description: "Private subnet 1 ID"

  PrivateSubnet2Id:
    Type: String
    Description: "Private subnet 2 ID"

  DatabaseHost:
    Type: String
    Description: "Database host endpoint"

  DatabaseUsername:
    Type: String
    Description: "Database username"

  DatabaseEngine:
    Type: String
    Description: "Database engine"

  DatabasePort:
    Type: String
    Description: "Database port"

  DatabaseName:
    Type: String
    Description: "Database name"

  DatabaseClusterArn:
    Type: String
    Description: "Database cluster ARN"

  DatabasePasswordSecretArn:
    Type: String
    Description: "Database password secret ARN"

  LogRetentionDays:
    Type: Number
    Default: 7
    Description: Number of days to retain CloudWatch logs

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster

  # CloudWatch Log Group for ECS
  WebECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetentionDays

  # Application Load Balancer
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroupId
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id

  # Target Group
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPort: 80

  # ALB HTTP Listener (redirects to HTTPS)
  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: HTTP_301

  # ALB HTTPS Listener
  WebHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebLoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref WebSSLCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup

  # SSL Certificate for HTTPS (subdomain)
  WebSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  # ECS Task Definition
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "webtd-${Environment}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "512"
      Memory: "1024"
      ExecutionRoleArn: !Ref SharedLambdaRoleArn
      TaskRoleArn: !Ref SharedLambdaRoleArn
      ContainerDefinitions:
        - Name: web
          Image: !Ref WebContainerImage
          Essential: true
          # Force ECS to pull the image on every deployment
          # This ensures version changes are picked up immediately
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: "Production"
            - Name: ConnectionStrings__DefaultConnection
              Value: !Sub
                - "Server=${DatabaseHost};Database=${DatabaseName};User Id=${DatabaseUsername};Password=${DatabasePassword};SslMode=Required;"
                - DatabaseHost: !Ref DatabaseHost
                  DatabaseName: !Ref DatabaseName
                  DatabaseUsername: !Ref DatabaseUsername
                  DatabasePassword: !Sub "{{resolve:secretsmanager:${DatabasePasswordSecretArn}:SecretString}}"
            - Name: ASPNETCORE_URLS
              Value: "http://*:80"
            - Name: DOTNET_RUNNING_IN_CONTAINER
              Value: "true"
            - Name: AWS__Logging__LogGroup
              Value: !Ref WebECSLogGroup
            - Name: AWS__Logging__Region
              Value: !Ref AWS::Region
            - Name: DEPLOYMENT_TOKEN
              Value: !Ref DeploymentToken
            - Name: Authentication__Google__ClientId
              Value: !Sub "{{resolve:secretsmanager:${!ImportValue GoogleOAuthSecretArn}:SecretString:clientId}}"
            - Name: Authentication__Google__ClientSecret
              Value: !Sub "{{resolve:secretsmanager:${!ImportValue GoogleOAuthSecretArn}:SecretString:clientSecret}}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Service
  WebService:
    Type: AWS::ECS::Service
    DependsOn:
      - WebListener
      - WebTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSTaskSecurityGroupId
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
      LoadBalancers:
        - TargetGroupArn: !Ref WebTargetGroup
          ContainerName: web
          ContainerPort: 80
      HealthCheckGracePeriodSeconds: 300

  # CloudWatch Alarms for Web
  WebECSServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Web ECS service unhealthy targets alarm"
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt WebLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt WebTargetGroup.TargetGroupFullName

Outputs:
  WebEndpoint:
    Description: "Web application endpoint URL"
    Value: !Sub "https://${DomainName}"

  WebLoadBalancerDNS:
    Description: "Web Load Balancer DNS name"
    Value: !GetAtt WebLoadBalancer.DNSName

  WebLoadBalancerHostedZoneId:
    Description: "Web Load Balancer hosted zone ID"
    Value: !FindInMap [RegionMap, !Ref AWS::Region, ALBHostedZoneId]

  WebTaskDefinition:
    Description: "Web ECS task definition"
    Value: !Ref WebTaskDefinition

  WebServiceName:
    Description: "Web ECS service name"
    Value: !Ref WebService
