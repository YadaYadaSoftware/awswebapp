AWSTemplateFormatVersion: "2010-09-09"
Description: "TaskManager Application - API and Web Components"

Parameters:
  Environment:
    Type: String
    Default: main
    Description: "Environment name (typically branch name)"

  ApiCodeBucket:
    Type: String
    Description: "S3 bucket name for API Lambda deployment package"

  WebContainerImage:
    Type: String
    Description: "Container image URI for the web application"

  DeploymentToken:
    Type: String
    Description: "Deployment token to force task definition updates"
    Default: "default"

  DomainName:
    Type: String
    Default: "appcloud.systems"
    Description: "Domain name for SSL certificate"

  HostedZoneId:
    Type: String
    Description: "Route 53 hosted zone ID for the domain"

  TemplatesBucket:
    Type: String
    Description: "S3 bucket name for CloudFormation templates"

  SharedLambdaRoleArn:
    Type: String
    Description: "ARN of the shared Lambda execution role"

  VPCId:
    Type: String
    Description: "VPC ID"

  LambdaSecurityGroupId:
    Type: String
    Description: "Security group ID for Lambda functions"

  PrivateSubnet1Id:
    Type: String
    Description: "Private subnet 1 ID"

  PrivateSubnet2Id:
    Type: String
    Description: "Private subnet 2 ID"

  ALBSecurityGroupId:
    Type: String
    Description: "Security group ID for ALB"

  ECSTaskSecurityGroupId:
    Type: String
    Description: "Security group ID for ECS tasks"

  PublicSubnet1Id:
    Type: String
    Description: "Public subnet 1 ID"

  PublicSubnet2Id:
    Type: String
    Description: "Public subnet 2 ID"

  ECSClusterName:
    Type: String
    Description: "ECS cluster name"

Conditions:
  IsUSEast1: !Equals [!Ref AWS::Region, "us-east-1"]

Resources:
  # API Stack (Nested)
  TaskManagerApiStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplatesBucket}/api-template.yaml"
      Parameters:
        Environment: !Ref Environment
        ApiCodeBucket: !Ref ApiCodeBucket
        SharedLambdaRoleArn: !Ref SharedLambdaRoleArn
        DatabaseEndpoint: !Sub "taskmanager-cluster.cluster-{{resolve:secretsmanager:taskmanager/database/${Environment}/regional/${AWS::Region}:SecretString:cluster_arn}}.${AWS::Region}.rds.amazonaws.com"
        LambdaSecurityGroupId: !Ref LambdaSecurityGroupId
        PrivateSubnet1Id: !Ref PrivateSubnet1Id
        PrivateSubnet2Id: !Ref PrivateSubnet2Id
      Tags:
        - Key: Component
          Value: API
        - Key: Environment
          Value: !Ref Environment
      TimeoutInMinutes: 30

  # Web Stack (Nested) - Infrastructure Only
  TaskManagerWebStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: TaskManagerApiStack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplatesBucket}/web-template.yaml"
      Parameters:
        Environment: !Ref Environment
        WebContainerImage: !Ref WebContainerImage
        DeploymentToken: !Ref DeploymentToken
        DomainName: !Ref DomainName
        HostedZoneId: !Ref HostedZoneId
        SharedLambdaRoleArn: !Ref SharedLambdaRoleArn
        VPCId: !Ref VPCId
        ALBSecurityGroupId: !Ref ALBSecurityGroupId
        ECSTaskSecurityGroupId: !Ref ECSTaskSecurityGroupId
        PublicSubnet1Id: !Ref PublicSubnet1Id
        PublicSubnet2Id: !Ref PublicSubnet2Id
        PrivateSubnet1Id: !Ref PrivateSubnet1Id
        PrivateSubnet2Id: !Ref PrivateSubnet2Id
        ECSClusterName: !Ref ECSClusterName
        DatabaseEndpoint: !Sub "taskmanager-cluster.cluster-{{resolve:secretsmanager:taskmanager/database/${Environment}/regional/${AWS::Region}:SecretString:cluster_arn}}.${AWS::Region}.rds.amazonaws.com"
      Tags:
        - Key: Component
          Value: Web-Infrastructure
        - Key: Environment
          Value: !Ref Environment
      TimeoutInMinutes: 30

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !GetAtt TaskManagerApiStack.Outputs.ApiEndpoint
    Export:
      Name: !Sub "TaskManager-${Environment}-ApiEndpoint"

  ApiLambdaFunctionName:
    Description: "API Lambda function name"
    Value: !GetAtt TaskManagerApiStack.Outputs.ApiLambdaFunctionName
    Export:
      Name: !Sub "TaskManager-${Environment}-ApiLambdaFunction"

  WebEndpoint:
    Description: "Web application endpoint URL"
    Value: !GetAtt TaskManagerWebStack.Outputs.WebEndpoint
    Export:
      Name: !Sub "TaskManager-${Environment}-WebEndpoint"

  WebLoadBalancerDNS:
    Description: "Web Load Balancer DNS name"
    Value: !GetAtt TaskManagerWebStack.Outputs.WebLoadBalancerDNS
    Export:
      Name: !Sub "TaskManager-${Environment}-WebLoadBalancerDNS"

  WebTaskDefinition:
    Description: "Web ECS task definition"
    Value: !GetAtt TaskManagerWebStack.Outputs.WebTaskDefinition
    Export:
      Name: !Sub "TaskManager-${Environment}-WebTaskDefinition"

  WebServiceName:
    Description: "Web ECS service name"
    Value: !GetAtt TaskManagerWebStack.Outputs.WebServiceName
    Export:
      Name: !Sub "TaskManager-${Environment}-WebService"

  BranchEnvironment:
    Description: "Branch environment name"
    Value: !Ref Environment
    Export:
      Name: !Sub "TaskManager-${Environment}-Environment"

  DeploymentSummary:
    Description: "Deployment summary"
    Value: !Sub |
      TaskManager ${Environment} API and Web deployed successfully!

      API Endpoint: ${TaskManagerApiStack.Outputs.ApiEndpoint}
      Web Application: https://${Environment}.${DomainName}

      API is running on AWS Lambda with API Gateway.
      Web is running on AWS ECS containers with Application Load Balancer.
