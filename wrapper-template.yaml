AWSTemplateFormatVersion: '2010-09-09'
Description: 'TaskManager Application - API (Lambda) + Web Infrastructure (ALB, Target Group, Task Definition)'

Parameters:
  Environment:
    Type: String
    Default: main
    Description: 'Environment name (typically branch name)'
    
  GoogleClientId:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client ID'
    
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client Secret'
    
  ApiCodeBucket:
    Type: String
    Description: 'S3 bucket name for API Lambda deployment package'

  WebContainerImage:
    Type: String
    Description: 'Container image URI for the web application'
    Default: 'nginx:latest'
    


Resources:
  # API Stack (Nested)
  TaskManagerApiStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://s3.amazonaws.com/${BucketName}/api-template.yaml'
        - BucketName: !ImportValue 'TaskManager-TemplatesBucket'
      Parameters:
        Environment: !Ref Environment
        GoogleClientId: !Ref GoogleClientId
        GoogleClientSecret: !Ref GoogleClientSecret
        ApiCodeBucket: !Ref ApiCodeBucket
      Tags:
        - Key: Component
          Value: API
        - Key: Environment
          Value: !Ref Environment
      TimeoutInMinutes: 30

  # Web Stack (Nested) - Infrastructure Only
  TaskManagerWebStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: TaskManagerApiStack
    Properties:
      TemplateURL: !Sub
        - 'https://s3.amazonaws.com/${BucketName}/web-template.yaml'
        - BucketName: !ImportValue 'TaskManager-TemplatesBucket'
      Parameters:
        Environment: !Ref Environment
        GoogleClientId: !Ref GoogleClientId
        GoogleClientSecret: !Ref GoogleClientSecret
        WebContainerImage: !Ref WebContainerImage
      Tags:
        - Key: Component
          Value: Web-Infrastructure
        - Key: Environment
          Value: !Ref Environment
      TimeoutInMinutes: 30


Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !GetAtt TaskManagerApiStack.Outputs.ApiEndpoint
    Export:
      Name: !Sub 'TaskManager-${Environment}-ApiEndpoint'


  ApiLambdaFunctionName:
    Description: 'API Lambda function name'
    Value: !GetAtt TaskManagerApiStack.Outputs.ApiLambdaFunctionName
    Export:
      Name: !Sub 'TaskManager-${Environment}-ApiLambdaFunction'

  WebEndpoint:
    Description: 'Web application endpoint URL'
    Value: !GetAtt TaskManagerWebStack.Outputs.WebEndpoint
    Export:
      Name: !Sub 'TaskManager-${Environment}-WebEndpoint'

  WebLoadBalancerDNS:
    Description: 'Web Load Balancer DNS name'
    Value: !GetAtt TaskManagerWebStack.Outputs.WebLoadBalancerDNS
    Export:
      Name: !Sub 'TaskManager-${Environment}-WebLoadBalancerDNS'

  WebTaskDefinition:
    Description: 'Web ECS task definition'
    Value: !GetAtt TaskManagerWebStack.Outputs.WebTaskDefinition
    Export:
      Name: !Sub 'TaskManager-${Environment}-WebTaskDefinition'

  WebServiceName:
    Description: 'Web ECS service name'
    Value: !GetAtt TaskManagerWebStack.Outputs.WebServiceName
    Export:
      Name: !Sub 'TaskManager-${Environment}-WebService'


  DatabaseName:
    Description: 'Branch-specific database name'
    Value: !GetAtt TaskManagerApiStack.Outputs.DatabaseName
    Export:
      Name: !Sub 'TaskManager-${Environment}-DatabaseName'

  BranchEnvironment:
    Description: 'Branch environment name'
    Value: !Ref Environment
    Export:
      Name: !Sub 'TaskManager-${Environment}-Environment'

  DeploymentSummary:
    Description: 'Deployment summary'
    Value: !Sub |
      TaskManager ${Environment} deployed successfully!

      API Endpoint: ${TaskManagerApiStack.Outputs.ApiEndpoint}
      Web Application: http://${TaskManagerWebStack.Outputs.WebLoadBalancerDNS}
      Database: taskmanager_${Environment}

      API is running on AWS Lambda with API Gateway.
      Web is running on AWS ECS containers with Application Load Balancer.