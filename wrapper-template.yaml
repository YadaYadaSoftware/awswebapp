AWSTemplateFormatVersion: '2010-09-09'
Description: 'TaskManager API Application - Lambda-based API with Database'

Parameters:
  Environment:
    Type: String
    Default: main
    Description: 'Environment name (typically branch name)'
    
  GoogleClientId:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client ID'
    
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: 'Google OAuth Client Secret'
    
  ApiCodeBucket:
    Type: String
    Description: 'S3 bucket name for API Lambda deployment package'
    


Resources:
  # API Stack (Nested)
  TaskManagerApiStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://s3.amazonaws.com/${BucketName}/api-template.yaml'
        - BucketName: !ImportValue 'TaskManager-TemplatesBucket'
      Parameters:
        Environment: !Ref Environment
        GoogleClientId: !Ref GoogleClientId
        GoogleClientSecret: !Ref GoogleClientSecret
        ApiCodeBucket: !Ref ApiCodeBucket
      Tags:
        - Key: Component
          Value: API
        - Key: Environment
          Value: !Ref Environment
      TimeoutInMinutes: 30


Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !GetAtt TaskManagerApiStack.Outputs.ApiEndpoint
    Export:
      Name: !Sub 'TaskManager-${Environment}-ApiEndpoint'


  ApiLambdaFunctionName:
    Description: 'API Lambda function name'
    Value: !GetAtt TaskManagerApiStack.Outputs.ApiLambdaFunctionName
    Export:
      Name: !Sub 'TaskManager-${Environment}-ApiLambdaFunction'


  DatabaseName:
    Description: 'Branch-specific database name'
    Value: !GetAtt TaskManagerApiStack.Outputs.DatabaseName
    Export:
      Name: !Sub 'TaskManager-${Environment}-DatabaseName'

  BranchEnvironment:
    Description: 'Branch environment name'
    Value: !Ref Environment
    Export:
      Name: !Sub 'TaskManager-${Environment}-Environment'

  DeploymentSummary:
    Description: 'Deployment summary'
    Value: !Sub |
      TaskManager ${Environment} API deployed successfully!

      API Endpoint: ${TaskManagerApiStack.Outputs.ApiEndpoint}
      Database: taskmanager_${Environment}

      API is running on AWS Lambda with API Gateway.